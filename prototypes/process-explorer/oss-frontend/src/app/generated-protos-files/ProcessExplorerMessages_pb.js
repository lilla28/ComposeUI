// source: ProcessExplorerMessages.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.ActionType', null, global);
goog.exportSymbol('proto.Connection', null, global);
goog.exportSymbol('proto.Message', null, global);
goog.exportSymbol('proto.Message.Action1Case', null, global);
goog.exportSymbol('proto.Module', null, global);
goog.exportSymbol('proto.Process', null, global);
goog.exportSymbol('proto.ProcessInfoCollectorData', null, global);
goog.exportSymbol('proto.ProcessThreadInfo', null, global);
goog.exportSymbol('proto.Registration', null, global);
goog.exportSymbol('proto.Subsystem', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Message.repeatedFields_, proto.Message.oneofGroups_);
};
goog.inherits(proto.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message.displayName = 'proto.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Process = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Process.repeatedFields_, null);
};
goog.inherits(proto.Process, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Process.displayName = 'proto.Process';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProcessThreadInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProcessThreadInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProcessThreadInfo.displayName = 'proto.ProcessThreadInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProcessInfoCollectorData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProcessInfoCollectorData.repeatedFields_, null);
};
goog.inherits(proto.ProcessInfoCollectorData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProcessInfoCollectorData.displayName = 'proto.ProcessInfoCollectorData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Registration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Registration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Registration.displayName = 'proto.Registration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Connection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Connection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Connection.displayName = 'proto.Connection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Module = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Module, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Module.displayName = 'proto.Module';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Subsystem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Subsystem.repeatedFields_, null);
};
goog.inherits(proto.Subsystem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Subsystem.displayName = 'proto.Subsystem';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Message.repeatedFields_ = [6,10,12,13];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Message.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.Message.Action1Case = {
  ACTION1_NOT_SET: 0,
  ACTION: 1
};

/**
 * @return {proto.Message.Action1Case}
 */
proto.Message.prototype.getAction1Case = function() {
  return /** @type {proto.Message.Action1Case} */(jspb.Message.computeOneofCase(this, proto.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    assemblyid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    processid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    periodofdelay: jspb.Message.getFieldWithDefault(msg, 5, 0),
    processesList: jspb.Message.toObjectList(msg.getProcessesList(),
    proto.Process.toObject, includeInstance),
    processstatuschangesMap: (f = msg.getProcessstatuschangesMap()) ? f.toObject(includeInstance, undefined) : [],
    runtimeinfo: (f = msg.getRuntimeinfo()) && proto.ProcessInfoCollectorData.toObject(includeInstance, f),
    multipleruntimeinfoMap: (f = msg.getMultipleruntimeinfoMap()) ? f.toObject(includeInstance, proto.ProcessInfoCollectorData.toObject) : [],
    connectionsList: jspb.Message.toObjectList(msg.getConnectionsList(),
    proto.Connection.toObject, includeInstance),
    connectionstatuschangesMap: (f = msg.getConnectionstatuschangesMap()) ? f.toObject(includeInstance, undefined) : [],
    registrationsList: jspb.Message.toObjectList(msg.getRegistrationsList(),
    proto.Registration.toObject, includeInstance),
    modulesList: jspb.Message.toObjectList(msg.getModulesList(),
    proto.Module.toObject, includeInstance),
    environmentvariablesMap: (f = msg.getEnvironmentvariablesMap()) ? f.toObject(includeInstance, undefined) : [],
    subsystemsMap: (f = msg.getSubsystemsMap()) ? f.toObject(includeInstance, proto.Subsystem.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message;
  return proto.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ActionType} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssemblyid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProcessid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeriodofdelay(value);
      break;
    case 6:
      var value = new proto.Process;
      reader.readMessage(value,proto.Process.deserializeBinaryFromReader);
      msg.addProcesses(value);
      break;
    case 7:
      var value = msg.getProcessstatuschangesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readString, null, 0, "");
         });
      break;
    case 8:
      var value = new proto.ProcessInfoCollectorData;
      reader.readMessage(value,proto.ProcessInfoCollectorData.deserializeBinaryFromReader);
      msg.setRuntimeinfo(value);
      break;
    case 9:
      var value = msg.getMultipleruntimeinfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.ProcessInfoCollectorData.deserializeBinaryFromReader, "", new proto.ProcessInfoCollectorData());
         });
      break;
    case 10:
      var value = new proto.Connection;
      reader.readMessage(value,proto.Connection.deserializeBinaryFromReader);
      msg.addConnections(value);
      break;
    case 11:
      var value = msg.getConnectionstatuschangesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 12:
      var value = new proto.Registration;
      reader.readMessage(value,proto.Registration.deserializeBinaryFromReader);
      msg.addRegistrations(value);
      break;
    case 13:
      var value = new proto.Module;
      reader.readMessage(value,proto.Module.deserializeBinaryFromReader);
      msg.addModules(value);
      break;
    case 14:
      var value = msg.getEnvironmentvariablesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 15:
      var value = msg.getSubsystemsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.Subsystem.deserializeBinaryFromReader, "", new proto.Subsystem());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.ActionType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPeriodofdelay();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getProcessesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.Process.serializeBinaryToWriter
    );
  }
  f = message.getProcessstatuschangesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRuntimeinfo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ProcessInfoCollectorData.serializeBinaryToWriter
    );
  }
  f = message.getMultipleruntimeinfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.ProcessInfoCollectorData.serializeBinaryToWriter);
  }
  f = message.getConnectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.Connection.serializeBinaryToWriter
    );
  }
  f = message.getConnectionstatuschangesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getRegistrationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.Registration.serializeBinaryToWriter
    );
  }
  f = message.getModulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.Module.serializeBinaryToWriter
    );
  }
  f = message.getEnvironmentvariablesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSubsystemsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.Subsystem.serializeBinaryToWriter);
  }
};


/**
 * optional ActionType action = 1;
 * @return {!proto.ActionType}
 */
proto.Message.prototype.getAction = function() {
  return /** @type {!proto.ActionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ActionType} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setAction = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.Message.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearAction = function() {
  return jspb.Message.setOneofField(this, 1, proto.Message.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasAction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.Message.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string assemblyId = 3;
 * @return {string}
 */
proto.Message.prototype.getAssemblyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setAssemblyid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearAssemblyid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasAssemblyid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 processId = 4;
 * @return {number}
 */
proto.Message.prototype.getProcessid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setProcessid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearProcessid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasProcessid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 periodOfDelay = 5;
 * @return {number}
 */
proto.Message.prototype.getPeriodofdelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setPeriodofdelay = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Process processes = 6;
 * @return {!Array<!proto.Process>}
 */
proto.Message.prototype.getProcessesList = function() {
  return /** @type{!Array<!proto.Process>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Process, 6));
};


/**
 * @param {!Array<!proto.Process>} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setProcessesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Process=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Process}
 */
proto.Message.prototype.addProcesses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Process, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearProcessesList = function() {
  return this.setProcessesList([]);
};


/**
 * map<int32, string> processStatusChanges = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,string>}
 */
proto.Message.prototype.getProcessstatuschangesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearProcessstatuschangesMap = function() {
  this.getProcessstatuschangesMap().clear();
  return this;
};


/**
 * optional ProcessInfoCollectorData runtimeInfo = 8;
 * @return {?proto.ProcessInfoCollectorData}
 */
proto.Message.prototype.getRuntimeinfo = function() {
  return /** @type{?proto.ProcessInfoCollectorData} */ (
    jspb.Message.getWrapperField(this, proto.ProcessInfoCollectorData, 8));
};


/**
 * @param {?proto.ProcessInfoCollectorData|undefined} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setRuntimeinfo = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearRuntimeinfo = function() {
  return this.setRuntimeinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Message.prototype.hasRuntimeinfo = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * map<string, ProcessInfoCollectorData> multipleRuntimeInfo = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.ProcessInfoCollectorData>}
 */
proto.Message.prototype.getMultipleruntimeinfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.ProcessInfoCollectorData>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      proto.ProcessInfoCollectorData));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearMultipleruntimeinfoMap = function() {
  this.getMultipleruntimeinfoMap().clear();
  return this;
};


/**
 * repeated Connection connections = 10;
 * @return {!Array<!proto.Connection>}
 */
proto.Message.prototype.getConnectionsList = function() {
  return /** @type{!Array<!proto.Connection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Connection, 10));
};


/**
 * @param {!Array<!proto.Connection>} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setConnectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.Connection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Connection}
 */
proto.Message.prototype.addConnections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.Connection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearConnectionsList = function() {
  return this.setConnectionsList([]);
};


/**
 * map<string, string> connectionStatusChanges = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.Message.prototype.getConnectionstatuschangesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearConnectionstatuschangesMap = function() {
  this.getConnectionstatuschangesMap().clear();
  return this;
};


/**
 * repeated Registration registrations = 12;
 * @return {!Array<!proto.Registration>}
 */
proto.Message.prototype.getRegistrationsList = function() {
  return /** @type{!Array<!proto.Registration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Registration, 12));
};


/**
 * @param {!Array<!proto.Registration>} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setRegistrationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.Registration=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Registration}
 */
proto.Message.prototype.addRegistrations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.Registration, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearRegistrationsList = function() {
  return this.setRegistrationsList([]);
};


/**
 * repeated Module modules = 13;
 * @return {!Array<!proto.Module>}
 */
proto.Message.prototype.getModulesList = function() {
  return /** @type{!Array<!proto.Module>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Module, 13));
};


/**
 * @param {!Array<!proto.Module>} value
 * @return {!proto.Message} returns this
*/
proto.Message.prototype.setModulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.Module=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Module}
 */
proto.Message.prototype.addModules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.Module, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearModulesList = function() {
  return this.setModulesList([]);
};


/**
 * map<string, string> environmentVariables = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.Message.prototype.getEnvironmentvariablesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearEnvironmentvariablesMap = function() {
  this.getEnvironmentvariablesMap().clear();
  return this;
};


/**
 * map<string, Subsystem> subsystems = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.Subsystem>}
 */
proto.Message.prototype.getSubsystemsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.Subsystem>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      proto.Subsystem));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.clearSubsystemsMap = function() {
  this.getSubsystemsMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Process.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Process.prototype.toObject = function(opt_includeInstance) {
  return proto.Process.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Process} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Process.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttime: jspb.Message.getFieldWithDefault(msg, 4, ""),
    processorusagetime: (f = msg.getProcessorusagetime()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    physicalmemoryusagebit: jspb.Message.getFieldWithDefault(msg, 6, 0),
    processname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    processid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    processpriorityclass: jspb.Message.getFieldWithDefault(msg, 9, ""),
    threadsList: jspb.Message.toObjectList(msg.getThreadsList(),
    proto.ProcessThreadInfo.toObject, includeInstance),
    virtualmemorysize: jspb.Message.getFieldWithDefault(msg, 11, 0),
    parentid: jspb.Message.getFieldWithDefault(msg, 12, 0),
    privatememoryusage: jspb.Message.getFieldWithDefault(msg, 13, 0),
    processstatus: jspb.Message.getFieldWithDefault(msg, 14, ""),
    memoryusage: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    processorusage: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Process}
 */
proto.Process.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Process;
  return proto.Process.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Process} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Process}
 */
proto.Process.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 5:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setProcessorusagetime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPhysicalmemoryusagebit(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessname(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProcessid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcesspriorityclass(value);
      break;
    case 10:
      var value = new proto.ProcessThreadInfo;
      reader.readMessage(value,proto.ProcessThreadInfo.deserializeBinaryFromReader);
      msg.addThreads(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVirtualmemorysize(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParentid(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPrivatememoryusage(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessstatus(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMemoryusage(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProcessorusage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Process.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Process.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Process} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Process.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProcessorusagetime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getThreadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.ProcessThreadInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeFloat(
      16,
      f
    );
  }
};


/**
 * optional string startTime = 4;
 * @return {string}
 */
proto.Process.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.setStarttime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.clearStarttime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Process.prototype.hasStarttime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Duration processorUsageTime = 5;
 * @return {?proto.google.protobuf.Duration}
 */
proto.Process.prototype.getProcessorusagetime = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 5));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.Process} returns this
*/
proto.Process.prototype.setProcessorusagetime = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.clearProcessorusagetime = function() {
  return this.setProcessorusagetime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Process.prototype.hasProcessorusagetime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 physicalMemoryUsageBit = 6;
 * @return {number}
 */
proto.Process.prototype.getPhysicalmemoryusagebit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.setPhysicalmemoryusagebit = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.clearPhysicalmemoryusagebit = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Process.prototype.hasPhysicalmemoryusagebit = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string processName = 7;
 * @return {string}
 */
proto.Process.prototype.getProcessname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.setProcessname = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.clearProcessname = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Process.prototype.hasProcessname = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 processId = 8;
 * @return {number}
 */
proto.Process.prototype.getProcessid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.setProcessid = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.clearProcessid = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Process.prototype.hasProcessid = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string processPriorityClass = 9;
 * @return {string}
 */
proto.Process.prototype.getProcesspriorityclass = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.setProcesspriorityclass = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.clearProcesspriorityclass = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Process.prototype.hasProcesspriorityclass = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated ProcessThreadInfo threads = 10;
 * @return {!Array<!proto.ProcessThreadInfo>}
 */
proto.Process.prototype.getThreadsList = function() {
  return /** @type{!Array<!proto.ProcessThreadInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProcessThreadInfo, 10));
};


/**
 * @param {!Array<!proto.ProcessThreadInfo>} value
 * @return {!proto.Process} returns this
*/
proto.Process.prototype.setThreadsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.ProcessThreadInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProcessThreadInfo}
 */
proto.Process.prototype.addThreads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.ProcessThreadInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.clearThreadsList = function() {
  return this.setThreadsList([]);
};


/**
 * optional int64 virtualMemorySize = 11;
 * @return {number}
 */
proto.Process.prototype.getVirtualmemorysize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.setVirtualmemorysize = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.clearVirtualmemorysize = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Process.prototype.hasVirtualmemorysize = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 parentId = 12;
 * @return {number}
 */
proto.Process.prototype.getParentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.setParentid = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.clearParentid = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Process.prototype.hasParentid = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int64 privateMemoryUsage = 13;
 * @return {number}
 */
proto.Process.prototype.getPrivatememoryusage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.setPrivatememoryusage = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.clearPrivatememoryusage = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Process.prototype.hasPrivatememoryusage = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string processStatus = 14;
 * @return {string}
 */
proto.Process.prototype.getProcessstatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.setProcessstatus = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.clearProcessstatus = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Process.prototype.hasProcessstatus = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float memoryUsage = 15;
 * @return {number}
 */
proto.Process.prototype.getMemoryusage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.setMemoryusage = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.clearMemoryusage = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Process.prototype.hasMemoryusage = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional float processorUsage = 16;
 * @return {number}
 */
proto.Process.prototype.getProcessorusage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.setProcessorusage = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Process} returns this
 */
proto.Process.prototype.clearProcessorusage = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Process.prototype.hasProcessorusage = function() {
  return jspb.Message.getField(this, 16) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProcessThreadInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ProcessThreadInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProcessThreadInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProcessThreadInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    prioritylevel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0),
    status: jspb.Message.getFieldWithDefault(msg, 4, ""),
    processorusagetime: (f = msg.getProcessorusagetime()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
    waitreason: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProcessThreadInfo}
 */
proto.ProcessThreadInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProcessThreadInfo;
  return proto.ProcessThreadInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProcessThreadInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProcessThreadInfo}
 */
proto.ProcessThreadInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrioritylevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 5:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setProcessorusagetime(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaitreason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProcessThreadInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProcessThreadInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProcessThreadInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProcessThreadInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProcessorusagetime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string startTime = 1;
 * @return {string}
 */
proto.ProcessThreadInfo.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProcessThreadInfo} returns this
 */
proto.ProcessThreadInfo.prototype.setStarttime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ProcessThreadInfo} returns this
 */
proto.ProcessThreadInfo.prototype.clearStarttime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProcessThreadInfo.prototype.hasStarttime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 priorityLevel = 2;
 * @return {number}
 */
proto.ProcessThreadInfo.prototype.getPrioritylevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProcessThreadInfo} returns this
 */
proto.ProcessThreadInfo.prototype.setPrioritylevel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ProcessThreadInfo} returns this
 */
proto.ProcessThreadInfo.prototype.clearPrioritylevel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProcessThreadInfo.prototype.hasPrioritylevel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 id = 3;
 * @return {number}
 */
proto.ProcessThreadInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProcessThreadInfo} returns this
 */
proto.ProcessThreadInfo.prototype.setId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ProcessThreadInfo} returns this
 */
proto.ProcessThreadInfo.prototype.clearId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProcessThreadInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string status = 4;
 * @return {string}
 */
proto.ProcessThreadInfo.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProcessThreadInfo} returns this
 */
proto.ProcessThreadInfo.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ProcessThreadInfo} returns this
 */
proto.ProcessThreadInfo.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProcessThreadInfo.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Duration processorUsageTime = 5;
 * @return {?proto.google.protobuf.Duration}
 */
proto.ProcessThreadInfo.prototype.getProcessorusagetime = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 5));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.ProcessThreadInfo} returns this
*/
proto.ProcessThreadInfo.prototype.setProcessorusagetime = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProcessThreadInfo} returns this
 */
proto.ProcessThreadInfo.prototype.clearProcessorusagetime = function() {
  return this.setProcessorusagetime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProcessThreadInfo.prototype.hasProcessorusagetime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string waitReason = 6;
 * @return {string}
 */
proto.ProcessThreadInfo.prototype.getWaitreason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProcessThreadInfo} returns this
 */
proto.ProcessThreadInfo.prototype.setWaitreason = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ProcessThreadInfo} returns this
 */
proto.ProcessThreadInfo.prototype.clearWaitreason = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProcessThreadInfo.prototype.hasWaitreason = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProcessInfoCollectorData.repeatedFields_ = [2,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProcessInfoCollectorData.prototype.toObject = function(opt_includeInstance) {
  return proto.ProcessInfoCollectorData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProcessInfoCollectorData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProcessInfoCollectorData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    registrationsList: jspb.Message.toObjectList(msg.getRegistrationsList(),
    proto.Registration.toObject, includeInstance),
    environmentvariablesMap: (f = msg.getEnvironmentvariablesMap()) ? f.toObject(includeInstance, undefined) : [],
    connectionsList: jspb.Message.toObjectList(msg.getConnectionsList(),
    proto.Connection.toObject, includeInstance),
    modulesList: jspb.Message.toObjectList(msg.getModulesList(),
    proto.Module.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProcessInfoCollectorData}
 */
proto.ProcessInfoCollectorData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProcessInfoCollectorData;
  return proto.ProcessInfoCollectorData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProcessInfoCollectorData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProcessInfoCollectorData}
 */
proto.ProcessInfoCollectorData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.Registration;
      reader.readMessage(value,proto.Registration.deserializeBinaryFromReader);
      msg.addRegistrations(value);
      break;
    case 3:
      var value = msg.getEnvironmentvariablesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = new proto.Connection;
      reader.readMessage(value,proto.Connection.deserializeBinaryFromReader);
      msg.addConnections(value);
      break;
    case 5:
      var value = new proto.Module;
      reader.readMessage(value,proto.Module.deserializeBinaryFromReader);
      msg.addModules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProcessInfoCollectorData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProcessInfoCollectorData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProcessInfoCollectorData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProcessInfoCollectorData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRegistrationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Registration.serializeBinaryToWriter
    );
  }
  f = message.getEnvironmentvariablesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getConnectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Connection.serializeBinaryToWriter
    );
  }
  f = message.getModulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Module.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.ProcessInfoCollectorData.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProcessInfoCollectorData} returns this
 */
proto.ProcessInfoCollectorData.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Registration registrations = 2;
 * @return {!Array<!proto.Registration>}
 */
proto.ProcessInfoCollectorData.prototype.getRegistrationsList = function() {
  return /** @type{!Array<!proto.Registration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Registration, 2));
};


/**
 * @param {!Array<!proto.Registration>} value
 * @return {!proto.ProcessInfoCollectorData} returns this
*/
proto.ProcessInfoCollectorData.prototype.setRegistrationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Registration=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Registration}
 */
proto.ProcessInfoCollectorData.prototype.addRegistrations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Registration, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProcessInfoCollectorData} returns this
 */
proto.ProcessInfoCollectorData.prototype.clearRegistrationsList = function() {
  return this.setRegistrationsList([]);
};


/**
 * map<string, string> environmentVariables = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ProcessInfoCollectorData.prototype.getEnvironmentvariablesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ProcessInfoCollectorData} returns this
 */
proto.ProcessInfoCollectorData.prototype.clearEnvironmentvariablesMap = function() {
  this.getEnvironmentvariablesMap().clear();
  return this;
};


/**
 * repeated Connection connections = 4;
 * @return {!Array<!proto.Connection>}
 */
proto.ProcessInfoCollectorData.prototype.getConnectionsList = function() {
  return /** @type{!Array<!proto.Connection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Connection, 4));
};


/**
 * @param {!Array<!proto.Connection>} value
 * @return {!proto.ProcessInfoCollectorData} returns this
*/
proto.ProcessInfoCollectorData.prototype.setConnectionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Connection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Connection}
 */
proto.ProcessInfoCollectorData.prototype.addConnections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Connection, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProcessInfoCollectorData} returns this
 */
proto.ProcessInfoCollectorData.prototype.clearConnectionsList = function() {
  return this.setConnectionsList([]);
};


/**
 * repeated Module modules = 5;
 * @return {!Array<!proto.Module>}
 */
proto.ProcessInfoCollectorData.prototype.getModulesList = function() {
  return /** @type{!Array<!proto.Module>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Module, 5));
};


/**
 * @param {!Array<!proto.Module>} value
 * @return {!proto.ProcessInfoCollectorData} returns this
*/
proto.ProcessInfoCollectorData.prototype.setModulesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Module=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Module}
 */
proto.ProcessInfoCollectorData.prototype.addModules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Module, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProcessInfoCollectorData} returns this
 */
proto.ProcessInfoCollectorData.prototype.clearModulesList = function() {
  return this.setModulesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Registration.prototype.toObject = function(opt_includeInstance) {
  return proto.Registration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Registration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Registration.toObject = function(includeInstance, msg) {
  var f, obj = {
    implementationtype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lifetime: jspb.Message.getFieldWithDefault(msg, 2, ""),
    servicetype: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Registration}
 */
proto.Registration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Registration;
  return proto.Registration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Registration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Registration}
 */
proto.Registration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImplementationtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLifetime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Registration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Registration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Registration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Registration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string implementationType = 1;
 * @return {string}
 */
proto.Registration.prototype.getImplementationtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Registration} returns this
 */
proto.Registration.prototype.setImplementationtype = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Registration} returns this
 */
proto.Registration.prototype.clearImplementationtype = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Registration.prototype.hasImplementationtype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string lifeTime = 2;
 * @return {string}
 */
proto.Registration.prototype.getLifetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Registration} returns this
 */
proto.Registration.prototype.setLifetime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Registration} returns this
 */
proto.Registration.prototype.clearLifetime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Registration.prototype.hasLifetime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string serviceType = 3;
 * @return {string}
 */
proto.Registration.prototype.getServicetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Registration} returns this
 */
proto.Registration.prototype.setServicetype = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Registration} returns this
 */
proto.Registration.prototype.clearServicetype = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Registration.prototype.hasServicetype = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Connection.prototype.toObject = function(opt_includeInstance) {
  return proto.Connection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Connection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Connection.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    localendpoint: jspb.Message.getFieldWithDefault(msg, 3, ""),
    remoteendpoint: jspb.Message.getFieldWithDefault(msg, 4, ""),
    remoteapplication: jspb.Message.getFieldWithDefault(msg, 5, ""),
    remotehostname: jspb.Message.getFieldWithDefault(msg, 6, ""),
    connectioninformationMap: (f = msg.getConnectioninformationMap()) ? f.toObject(includeInstance, undefined) : [],
    status: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Connection}
 */
proto.Connection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Connection;
  return proto.Connection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Connection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Connection}
 */
proto.Connection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalendpoint(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteendpoint(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteapplication(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemotehostname(value);
      break;
    case 7:
      var value = msg.getConnectioninformationMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Connection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Connection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Connection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Connection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getConnectioninformationMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Connection.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Connection.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Connection.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Connection.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string localEndpoint = 3;
 * @return {string}
 */
proto.Connection.prototype.getLocalendpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.setLocalendpoint = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.clearLocalendpoint = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Connection.prototype.hasLocalendpoint = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string remoteEndpoint = 4;
 * @return {string}
 */
proto.Connection.prototype.getRemoteendpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.setRemoteendpoint = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.clearRemoteendpoint = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Connection.prototype.hasRemoteendpoint = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string remoteApplication = 5;
 * @return {string}
 */
proto.Connection.prototype.getRemoteapplication = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.setRemoteapplication = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.clearRemoteapplication = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Connection.prototype.hasRemoteapplication = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string remoteHostname = 6;
 * @return {string}
 */
proto.Connection.prototype.getRemotehostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.setRemotehostname = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.clearRemotehostname = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Connection.prototype.hasRemotehostname = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * map<string, string> connectionInformation = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.Connection.prototype.getConnectioninformationMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.clearConnectioninformationMap = function() {
  this.getConnectioninformationMap().clear();
  return this;
};


/**
 * optional string status = 8;
 * @return {string}
 */
proto.Connection.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Connection} returns this
 */
proto.Connection.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Connection.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Module.prototype.toObject = function(opt_includeInstance) {
  return proto.Module.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Module} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Module.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    versionredirectedfrom: jspb.Message.getFieldWithDefault(msg, 3, ""),
    publickeytoken: msg.getPublickeytoken_asB64(),
    location: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Module}
 */
proto.Module.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Module;
  return proto.Module.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Module} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Module}
 */
proto.Module.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersionredirectedfrom(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickeytoken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Module.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Module.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Module} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Module.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Module.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Module} returns this
 */
proto.Module.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Module} returns this
 */
proto.Module.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Module.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.Module.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Module} returns this
 */
proto.Module.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Module} returns this
 */
proto.Module.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Module.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string versionRedirectedFrom = 3;
 * @return {string}
 */
proto.Module.prototype.getVersionredirectedfrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Module} returns this
 */
proto.Module.prototype.setVersionredirectedfrom = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Module} returns this
 */
proto.Module.prototype.clearVersionredirectedfrom = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Module.prototype.hasVersionredirectedfrom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes publicKeyToken = 4;
 * @return {!(string|Uint8Array)}
 */
proto.Module.prototype.getPublickeytoken = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes publicKeyToken = 4;
 * This is a type-conversion wrapper around `getPublickeytoken()`
 * @return {string}
 */
proto.Module.prototype.getPublickeytoken_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickeytoken()));
};


/**
 * optional bytes publicKeyToken = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickeytoken()`
 * @return {!Uint8Array}
 */
proto.Module.prototype.getPublickeytoken_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickeytoken()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Module} returns this
 */
proto.Module.prototype.setPublickeytoken = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Module} returns this
 */
proto.Module.prototype.clearPublickeytoken = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Module.prototype.hasPublickeytoken = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string location = 5;
 * @return {string}
 */
proto.Module.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Module} returns this
 */
proto.Module.prototype.setLocation = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Module} returns this
 */
proto.Module.prototype.clearLocation = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Module.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Subsystem.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Subsystem.prototype.toObject = function(opt_includeInstance) {
  return proto.Subsystem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Subsystem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Subsystem.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startuptype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uitype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    path: jspb.Message.getFieldWithDefault(msg, 4, ""),
    url: jspb.Message.getFieldWithDefault(msg, 5, ""),
    argumentsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    port: jspb.Message.getFieldWithDefault(msg, 7, 0),
    state: jspb.Message.getFieldWithDefault(msg, 8, ""),
    description: jspb.Message.getFieldWithDefault(msg, 9, ""),
    automatedstart: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Subsystem}
 */
proto.Subsystem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Subsystem;
  return proto.Subsystem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Subsystem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Subsystem}
 */
proto.Subsystem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartuptype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUitype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addArguments(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutomatedstart(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Subsystem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Subsystem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Subsystem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Subsystem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAutomatedstart();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Subsystem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string startupType = 2;
 * @return {string}
 */
proto.Subsystem.prototype.getStartuptype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.setStartuptype = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.clearStartuptype = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Subsystem.prototype.hasStartuptype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string uiType = 3;
 * @return {string}
 */
proto.Subsystem.prototype.getUitype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.setUitype = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.clearUitype = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Subsystem.prototype.hasUitype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string path = 4;
 * @return {string}
 */
proto.Subsystem.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.setPath = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.clearPath = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Subsystem.prototype.hasPath = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.Subsystem.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.setUrl = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.clearUrl = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Subsystem.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated string arguments = 6;
 * @return {!Array<string>}
 */
proto.Subsystem.prototype.getArgumentsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.setArgumentsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.addArguments = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.clearArgumentsList = function() {
  return this.setArgumentsList([]);
};


/**
 * optional int32 port = 7;
 * @return {number}
 */
proto.Subsystem.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.setPort = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.clearPort = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Subsystem.prototype.hasPort = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string state = 8;
 * @return {string}
 */
proto.Subsystem.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string description = 9;
 * @return {string}
 */
proto.Subsystem.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Subsystem.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool automatedStart = 10;
 * @return {boolean}
 */
proto.Subsystem.prototype.getAutomatedstart = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Subsystem} returns this
 */
proto.Subsystem.prototype.setAutomatedstart = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * @enum {number}
 */
proto.ActionType = {
  ADDPROCESSLISTACTION: 0,
  ADDPROCESSACTION: 1,
  REMOVEPROCESSBYIDACTION: 2,
  UPDATEPROCESSACTION: 3,
  UPDATEPROCESSSTATUSACTION: 4,
  ADDRUNTIMEINFOACTION: 5,
  ADDCONNECTIONLISTACTION: 6,
  UPDATECONNECTIONACTION: 7,
  UPDATECONNECTIONSTATUSACTION: 8,
  UPDATEENVIRONMENTVARIABLESACTION: 9,
  UPDATEMODULESACTION: 10,
  UPDATEREGISTRATIONSACTION: 11,
  UPDATESUBSYSTEMACTION: 12,
  INITSUBSYSTEMSACTION: 13,
  MODIFYSUBSYSTEMACTION: 14,
  REMOVESUBSYSTEMSACTION: 15,
  ADDSUBSYSTEMACTION: 16,
  ADDSUBSYSTEMSACTION: 17,
  RESTARTSUBSYSTEMSACTION: 18,
  TERMINATESUBSYSTEMSACTION: 19,
  LAUNCHSUBSYSTEMSACTION: 20,
  LAUNCHSUBSYSTEMSWITHDELAYACTION: 21,
  SUBSCRIPTIONALIVEACTION: 22
};

goog.object.extend(exports, proto);
