{"version":3,"file":"rpc-message-types.js","sourceRoot":"","sources":["../../src/rpc-message-types.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/**\n * Types describing the message object format that the library sends over the channel.\n *\n * These are for internal type safety, not to be used by the user.\n * @module\n * @internal\n */\n\nimport type { ClassDescriptors, ObjectDescriptors } from './rpc-descriptor-types';\n\nexport type RPC_Marker = { rpc_marker?: 'srpc' };\n\n// descriptor request & response\nexport type RPC_GetDescriptorsMessage = RPC_Marker & { action: 'get_descriptors' };\nexport type RPC_DescriptorsResultMessage = RPC_Marker & { action: 'descriptors', objects: ObjectDescriptors, classes: ClassDescriptors };\n\n// function call messages\nexport type RPC_FnCallMessageBase = RPC_Marker & { objId: string, args: any[] };\n//  - 3 types (void, sync, async), only async needs a callId for correlating the response message\nexport type RPC_VoidFnCallMessage = RPC_FnCallMessageBase & { callType: 'void' };\nexport type RPC_SyncFnCallMessage = RPC_FnCallMessageBase & { callType: 'sync' };\nexport type RPC_AsyncFnCallMessage = RPC_FnCallMessageBase & { callType: 'async', callId: number | string };\nexport type RPC_AnyCallTypeFnCallMessage = RPC_VoidFnCallMessage | RPC_SyncFnCallMessage | RPC_AsyncFnCallMessage;\n//  - different actions may have different calltypes\nexport type RPC_FnCallMessage = { action: 'fn_call' } & RPC_AnyCallTypeFnCallMessage;\nexport type RPC_CtorCallMessage = { action: 'ctor_call' } & (RPC_SyncFnCallMessage | RPC_AsyncFnCallMessage);\nexport type RPC_PropGetMessage = { action: 'prop_get', prop: string } & (RPC_SyncFnCallMessage | RPC_AsyncFnCallMessage);\nexport type RPC_PropSetMessage = { action: 'prop_set', prop: string } & (RPC_VoidFnCallMessage | RPC_SyncFnCallMessage);\nexport type RPC_RpcCallMessage = { action: 'method_call', prop: string } & RPC_AnyCallTypeFnCallMessage;\n\nexport type RPC_AnyCallMessage = RPC_FnCallMessage | RPC_CtorCallMessage | RPC_PropGetMessage | RPC_PropSetMessage | RPC_RpcCallMessage;\n\n// extract the \"action\" types for specific calltypes\nexport type RPC_AnyCallAction = RPC_AnyCallMessage['action'];\nexport type RPC_VoidCallAction = (RPC_AnyCallMessage & { callType: 'void' })['action'];\nexport type RPC_SyncCallAction = (RPC_AnyCallMessage & { callType: 'sync' })['action'];\nexport type RPC_AsyncCallAction = (RPC_AnyCallMessage & { callType: 'async' })['action'];\n\n// function call result messages\nexport type RPC_FnResultMessageBase = RPC_Marker & { action: 'fn_reply', success: boolean; result: any };\nexport type RPC_SyncFnResultMessage = RPC_FnResultMessageBase & { callType: 'sync' };\nexport type RPC_AsyncFnResultMessage = RPC_FnResultMessageBase & { callType: 'async', callId: number | string };\nexport type RPC_FnResultMessage = RPC_SyncFnResultMessage | RPC_AsyncFnResultMessage;\n\nexport type RPC_ObjectDiedMessage = RPC_Marker & { action: 'obj_died', objId: string };\nexport type RPC_AsyncCallbackCallMessage = RPC_Marker & { action: 'async_fn', objId: string, args: any[] };\n\n// the generic message type\nexport type RPC_Message = RPC_GetDescriptorsMessage | RPC_DescriptorsResultMessage |\n    RPC_AnyCallMessage | RPC_FnResultMessage | RPC_AsyncCallbackCallMessage | RPC_ObjectDiedMessage;\n"]}