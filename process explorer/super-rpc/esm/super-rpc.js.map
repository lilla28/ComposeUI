{"version":3,"file":"super-rpc.js","sourceRoot":"","sources":["../../src/super-rpc.ts"],"names":[],"mappings":"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","sourcesContent":["import { rpc_disposed, ProxyObjectRegistry } from './proxy-object-registry';\nimport {\n    ClassDescriptor, ClassDescriptors, Descriptor,\n    FunctionDescriptor, FunctionReturnBehavior,\n    getArgumentDescriptor, getFunctionDescriptor, getPropertyDescriptor, getPropName,\n    isFunctionDescriptor, ObjectDescriptor, ObjectDescriptors, ObjectDescriptorWithProps\n} from './rpc-descriptor-types';\nimport type {\n    RPC_AnyCallAction, RPC_AnyCallMessage,\n    RPC_AsyncCallAction, RPC_DescriptorsResultMessage,\n    RPC_Message, RPC_SyncCallAction, RPC_VoidCallAction\n} from './rpc-message-types';\n\n\ntype PromiseCallbacks = {\n    resolve: (data?: any) => void;\n    reject: (data?: any) => void;\n};\n\nexport type AnyConstructor = new (...args: any[]) => any;\nexport type AnyFunction = ((...args: any[]) => any);\n\ntype ClassRegistryEntry = {\n    descriptor: ClassDescriptor;\n    classCtor: AnyConstructor;\n};\n\ntype HostObjectRegistryEntry = {\n    target: any;\n    descriptor: FunctionDescriptor | ObjectDescriptor;\n};\n\n\nconst hostObjectId = Symbol('hostObjectId');\nconst proxyObjectId = Symbol('proxyObjectId');\nconst classIdSym = Symbol('classId');\n\n/**\n * The channel used for the communication.\n * Can support synchronous and/or asynchronous messages.\n *\n * Note: if sync/async is not supported, make sure to use the correct return type for functions: [[FunctionReturnBehavior]].\n */\nexport interface RPCChannel {\n    /**\n     * Sends a message and returns the response synchronously.\n     */\n    sendSync?: (message: RPC_Message) => any;\n\n    /**\n     * Sends a message asnychronously. The response will come via the `receive` callback function.\n     */\n    sendAsync?: (message: RPC_Message) => void;\n\n    /**\n     * Register a callback for when an async message arrives.\n     * Note: The \"context\" is exposed during function calls via the [[SuperRPC.currentContext]] property.\n     */\n    receive?: (callback: (message: RPC_Message, replyChannel?: RPCChannel, context?: any) => void) => void;\n}\n\n/**\n * The SuperRPC is the central piece. An instance must be created on both sides.\n *\n * Objects, functions or classes can be registered on the \"host\" side\n * (see [[registerHostObject]], [[registerHostClass]]) and then functions/properties can be\n * called from the \"client\" side (see [[getProxyObject]], [[getProxyClass]]).\n *\n * The RPC service is symmetric, so depending on the use-case (and the channel),\n * both side can be \"host\" and \"client\" at the same time.\n *\n * The constructor needs a function to generate unique IDs for objects.\n * In order to have no dependencies this needs to be passed in.\n * For convenience the examples use [nanoid](https://www.npmjs.com/package/nanoid).\n */\nexport class SuperRPC {\n    private channel!: RPCChannel;\n\n    private remoteObjectDescriptors?: ObjectDescriptors;\n    private remoteClassDescriptors?: ClassDescriptors;\n    private remoteDescriptorsCallbacks?: PromiseCallbacks;\n\n    private asyncCallbacks = new Map<number|string, PromiseCallbacks>();\n    private callId = 0;\n\n    private readonly proxyObjectRegistry = new ProxyObjectRegistry();\n    private readonly proxyClassRegistry = new Map<string, AnyConstructor>();\n    private readonly hostObjectRegistry = new Map<string, HostObjectRegistryEntry>();\n    private readonly hostClassRegistry = new Map<string, ClassRegistryEntry>();\n\n    /**\n     * @param objectIdGenerator A function to generate a unique ID for an object.\n     *\n     * When sending an object to the other side that can not be serialized, we\n     * generate an ID and send that instead. The other side creates a proxy object\n     * that represents the remote object.\n     */\n    constructor(private objectIdGenerator: () => string) {\n    }\n\n    /**\n     * Stores the current \"context\" object that is passed to the callback of the [[RPCChannel.receive]] function.\n     */\n    public currentContext: any;\n\n    /**\n     * Connect the service to a channel.\n     */\n    connect(channel: RPCChannel) {\n        this.channel = channel;\n        channel.receive?.(this.messageReceived.bind(this));\n    }\n\n    /**\n     * Register an object in the service to be called remotely.\n     * @param objId An ID that the \"client\" side uses to identify this object.\n     * @param target The target object\n     * @param descriptor Describes which functions/properties to expose\n     */\n    registerHostObject(objId: string, target: object, descriptor: ObjectDescriptor) {\n        descriptor.type = 'object';\n        (target as any)[hostObjectId] = objId;\n        this.hostObjectRegistry.set(objId, { target, descriptor });\n    }\n\n    /**\n     * Register a function in the service to be called remotely.\n     * @param objId An ID that the \"client\" side uses to identify this function.\n     * @param target The target function\n     * @param descriptor Describes arguments and return behavior ([[FunctionReturnBehavior]])\n     */\n    registerHostFunction(objId: string, target: AnyFunction, descriptor: FunctionDescriptor) {\n        descriptor.type = 'function';\n        (target as any)[hostObjectId] = objId;\n        this.hostObjectRegistry.set(objId, { target, descriptor });\n    }\n\n    /**\n     * Register a class in the service.\n     *\n     * When an instance of this class is passed to the other side, only the \"readonlyProperties\" are sent (see [[ClassDescriptor]]).\n     * Functions and proxied properties are generated there and those call back to the original object.\n     *\n     * Even the constructor can be proxied.\n     *\n     * Note: static functions/properties act as if the class was a normal host object.\n     *\n     * @param classId An ID to identify the class on the client side.\n     * @param classCtor The class itself (its constructor function)\n     * @param descriptor What properties/functions to expose\n     */\n    registerHostClass(classId: string, classCtor: AnyConstructor, descriptor: ClassDescriptor) {\n        descriptor.type = 'class';\n        descriptor.classId = classId;\n\n        if (descriptor.static) {\n            this.registerHostObject(classId, classCtor, descriptor.static);\n        }\n\n        if (descriptor.ctor) {\n            this.registerHostFunction(classId + '.ctor', <any>classCtor, descriptor.ctor);\n        }\n\n        (classCtor as any)[classIdSym] = classId;\n        this.hostClassRegistry.set(classId, { classCtor, descriptor });\n    }\n\n    /**\n     * Send a request to get the descriptors for the registered host objects from the other side.\n     * Uses synchronous communication if possible and returns `true`/`false` based on if the descriptors were received.\n     * If sync is not available, it uses async messaging and returns a Promise.\n     */\n    requestRemoteDescriptors() {\n        if (this.channel?.sendSync) {\n            const response = this.sendSync({ action: 'get_descriptors' }) as RPC_DescriptorsResultMessage;\n            return this.setRemoteDescriptors(response);\n        }\n\n        return new Promise<void>((resolve, reject) => {\n            this.sendAsync({ action: 'get_descriptors' });\n            this.remoteDescriptorsCallbacks = { resolve, reject };\n        });\n    }\n\n    private setRemoteDescriptors(response: RPC_DescriptorsResultMessage) {\n        if (typeof response === 'object' && response.objects && response.classes) {\n            this.remoteObjectDescriptors = response.objects;\n            this.remoteClassDescriptors = response.classes;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Send the descriptors for the registered host objects to the other side.\n     * If possible, the message is sent synchronously.\n     * This is a \"push\" style message, for \"pull\" see [[requestRemoteDescriptors]].\n     */\n    sendRemoteDescriptors(replyChannel = this.channel) {\n        this.sendSyncIfPossible({\n            action: 'descriptors',\n            objects: this.getLocalDescriptors(this.hostObjectRegistry),\n            classes: this.getLocalDescriptors(this.hostClassRegistry),\n        }, replyChannel);\n    }\n\n    private getLocalDescriptors<T extends HostObjectRegistryEntry|ClassRegistryEntry>(registry: Map<string, T>):\n        T extends HostObjectRegistryEntry ? ObjectDescriptors : ClassDescriptors\n    {\n        const descriptors: any = {};\n        for (const key of registry.keys()) {\n            // .get() could return undefined, but we know it will never do that, since we iterate over existing keys\n            // therefore it is safe to cast it to the entry types\n            const entry = <ClassRegistryEntry|HostObjectRegistryEntry>registry.get(key);\n\n            if (!entry.descriptor) continue;\n\n            const descr = descriptors[key] = { ...entry.descriptor };\n\n            if (entry.descriptor.type === 'object' && entry.descriptor.readonlyProperties) {\n                const props: any = {};\n                for (const prop of entry.descriptor.readonlyProperties) {\n                    props[prop] = (entry as HostObjectRegistryEntry).target[prop];\n                }\n                (descr as ObjectDescriptorWithProps).props = props;\n            }\n        }\n        return descriptors;\n    }\n\n    private sendSync(message: RPC_Message, channel = this.channel) {\n        this.addMarker(message);\n        return channel?.sendSync?.(message);\n    }\n\n    private sendAsync(message: RPC_Message, channel = this.channel) {\n        this.addMarker(message);\n        channel?.sendAsync?.(message);\n    }\n\n    private sendSyncIfPossible(message: RPC_Message, channel = this.channel) {\n        return channel?.sendSync ? this.sendSync(message, channel) : this.sendAsync(message, channel);\n    }\n\n    private sendAsyncIfPossible(message: RPC_Message, channel = this.channel) {\n        return channel?.sendAsync ? this.sendAsync(message, channel) : this.sendSync(message, channel);\n    }\n\n    private addMarker(message: RPC_Message) {\n        message.rpc_marker = 'srpc';\n    }\n\n    private checkMarker(message: RPC_Message) {\n        return typeof message === 'object' && message.rpc_marker === 'srpc';\n    }\n\n    private callTargetFunction(msg: RPC_AnyCallMessage, replyChannel = this.channel) {\n        const entry = this.hostObjectRegistry.get(msg.objId);\n        let result: any;\n        let success = true;\n        try {\n            if (!entry) throw new Error(`No object found with ID '${msg.objId}'`);\n            let scope: unknown = null;\n            let { descriptor, target } = entry;\n\n            switch (msg.action) {\n                case 'prop_get': {\n                    result = target[msg.prop];\n                    break;\n                }\n                case 'prop_set': {\n                    const descr = getPropertyDescriptor(descriptor as ObjectDescriptor, msg.prop);\n                    target[msg.prop] = this.processAfterSerialization(msg.args[0], replyChannel, descr?.get?.arguments?.[0]);\n                    break;\n                }\n                case 'method_call': {\n                    scope = target;\n                    descriptor = getFunctionDescriptor(descriptor as ObjectDescriptor, msg.prop);\n                    target = target[msg.prop];\n                    if (typeof target !== 'function') throw new Error(`Property ${msg.prop} is not a function on object ${msg.objId}`);\n                    // NO break here!\n                }\n                // eslint-disable-next-line no-fallthrough\n                case 'fn_call': {\n                    result = target.apply(scope, this.deserializeFunctionArgs(descriptor as FunctionDescriptor, msg.args, replyChannel));\n                    break;\n                }\n                case 'ctor_call': {\n                    result = new target(...this.deserializeFunctionArgs(descriptor as FunctionDescriptor, msg.args, replyChannel));\n                    break;\n                }\n            }\n\n            if (msg.callType === 'async') {\n                Promise.resolve(result)\n                    .then(value => result = this.processBeforeSerialization(value, replyChannel), err => { result = err?.toString?.(); success = false; })\n                    .then(() => this.sendAsync({ action: 'fn_reply', callType: 'async', success, result, callId: msg.callId }, replyChannel));\n            } else if (msg.callType === 'sync') {\n                result = this.processBeforeSerialization(result, replyChannel);\n            }\n        } catch (err: any) {\n            success = false;\n            result = err?.toString?.();\n        }\n        if (msg.callType === 'sync') {\n            this.sendSync({ action: 'fn_reply', callType: 'sync', success, result }, replyChannel);\n        } else if (msg.callType === 'async' && !success) {\n            this.sendAsync({ action: 'fn_reply', callType: 'async', success, result, callId: msg.callId }, replyChannel);\n        }\n    }\n\n    private messageReceived(message: RPC_Message, replyChannel = this.channel, context?: any) {\n        this.currentContext = context;\n\n        if (this.checkMarker(message)) {\n            switch (message.action) {\n                case 'get_descriptors': {\n                    this.sendRemoteDescriptors(replyChannel);\n                    break;\n                }\n                case 'descriptors': {\n                    const success = this.setRemoteDescriptors(message);\n                    this.remoteDescriptorsCallbacks?.[success ? 'resolve' : 'reject']();\n                    this.remoteDescriptorsCallbacks = undefined;\n                    break;\n                }\n                case 'prop_get':\n                case 'prop_set':\n                case 'ctor_call':\n                case 'fn_call':\n                case 'method_call': {\n                    this.callTargetFunction(message, replyChannel);\n                    break;\n                }\n                case 'obj_died': {\n                    this.hostObjectRegistry.delete(message.objId);\n                    break;\n                }\n                case 'fn_reply': {\n                    if (message.callType === 'async') {\n                        const result = this.processAfterSerialization(message.result, replyChannel);\n                        const callbacks = this.asyncCallbacks.get(message.callId);\n                        callbacks?.[message.success ? 'resolve' : 'reject'](result);\n                        this.asyncCallbacks.delete(message.callId);\n                    }\n                    break;\n                }\n            }\n        }\n    }\n\n\n    private serializeFunctionArgs(func: FunctionDescriptor, args: any[], replyChannel: RPCChannel) {\n        return args.map((arg, idx) => this.processBeforeSerialization(arg, replyChannel, getArgumentDescriptor(func, idx)));\n    }\n\n    private deserializeFunctionArgs(func: FunctionDescriptor, args: any[], replyChannel: RPCChannel) {\n        return args.map((arg, idx) => this.processAfterSerialization(arg, replyChannel, getArgumentDescriptor(func, idx)));\n    }\n\n    private createVoidProxyFunction(objId: string|null, func: FunctionDescriptor, action: RPC_VoidCallAction, replyChannel: RPCChannel) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const _this = this;\n        const fn = function (this: any, ...args: any[]) {\n            if ((fn as any)[rpc_disposed]) throw new Error('Remote function has been disposed');\n            _this.sendAsyncIfPossible({\n                action,\n                callType: 'void',\n                objId: objId ?? this[proxyObjectId],\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                prop: func.name!,\n                args: _this.serializeFunctionArgs(func, args, replyChannel)\n            }, replyChannel);\n        };\n        return fn;\n    }\n\n    private createSyncProxyFunction(objId: string|null, func: FunctionDescriptor, action: RPC_SyncCallAction, replyChannel: RPCChannel) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const _this = this;\n        const fn = function (this: any, ...args: any[]) {\n            if ((fn as any)[rpc_disposed]) throw new Error('Remote function has been disposed');\n            const response = _this.sendSync({\n                action,\n                callType: 'sync',\n                objId: objId ?? this[proxyObjectId],\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                prop: func.name!,\n                args: _this.serializeFunctionArgs(func, args, replyChannel)\n            }, replyChannel);\n\n            if (!response) throw new Error('No response received');\n            if (!_this.checkMarker(response)) throw new Error(`Invalid response ${JSON.stringify(response)}`);\n\n            if (!response.success) throw new Error(response.result);\n            return _this.processAfterSerialization(response.result, replyChannel);\n        };\n        return fn;\n    }\n\n    private createAsyncProxyFunction(objId: string|null, func: FunctionDescriptor, action: RPC_AsyncCallAction, replyChannel: RPCChannel) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const _this = this;\n        const fn = function (this: any, ...args: any[]) {\n            return new Promise((resolve, reject) => {\n                if ((fn as any)[rpc_disposed]) throw new Error('Remote function has been disposed');\n                _this.callId++;\n                _this.sendAsync({\n                    action,\n                    callType: 'async',\n                    objId: objId ?? this[proxyObjectId],\n                    callId: _this.callId,\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    prop: func.name!,\n                    args: _this.serializeFunctionArgs(func, args, replyChannel)\n                }, replyChannel);\n                _this.asyncCallbacks.set(_this.callId, { resolve, reject });\n            });\n        };\n        return fn;\n    }\n\n    private createProxyFunction(\n        objId: string | null,\n        prop: string | FunctionDescriptor,\n        action: RPC_AnyCallAction,\n        defaultCallType: FunctionReturnBehavior = 'async',\n        replyChannel = this.channel): AnyFunction | AnyConstructor\n    {\n        const descriptor = (typeof prop === 'object') ? prop : { name: prop };\n        let callType = descriptor?.returns || defaultCallType;\n\n        if (callType === 'async' && !replyChannel.sendAsync) callType = 'sync';\n        if (callType === 'sync' && !replyChannel.sendSync) callType = 'async';\n\n        switch (callType) {\n            case 'void': return this.createVoidProxyFunction(objId, descriptor, <RPC_VoidCallAction>action, replyChannel);\n            case 'sync': return this.createSyncProxyFunction(objId, descriptor, <RPC_SyncCallAction>action, replyChannel);\n            default: return this.createAsyncProxyFunction(objId, descriptor, <RPC_AsyncCallAction>action, replyChannel);\n        }\n    }\n\n    /**\n     * Gets or creates a proxy object that represents a host object from the other side.\n     *\n     * This side must have the descriptor for the object.\n     * See [[sendRemoteDescriptors]], [[requestRemoteDescriptors]].\n     */\n    getProxyObject(objId: string) {\n        let obj: any = this.proxyObjectRegistry.get(objId);\n        if (obj) return obj;\n\n        const descriptor = this.remoteObjectDescriptors?.[objId];\n        if (!descriptor) {\n            throw new Error(`No object registered with ID '${objId}'`);\n        }\n\n        if (isFunctionDescriptor(descriptor)) {\n            obj = this.createProxyFunction(objId, descriptor, 'fn_call');\n        } else {\n            obj = this.createProxyObject(objId, descriptor);\n        }\n\n        this.proxyObjectRegistry.register(objId, obj);\n        return obj;\n    }\n\n    /**\n     * Gets or creates a proxy \"class\" that will serve multiple purposes.\n     * - Static functions/properties on the class are proxied the same way as on a regular \"host\" object\n     * - If specified the constructor actually constructs an instance of the registered host class on the other side\n     * and the returned instance will represent the remote instance, with the specified functions/properties working\n     * on its prototype as expected.\n     * - If an instance of the registered host class is being sent from the other side,\n     * an instance of this proxy class will be created and passed on this side.\n     */\n    getProxyClass(classId: string): AnyConstructor {\n        let clazz = this.proxyClassRegistry.get(classId);\n        if (clazz) return clazz;\n\n        const descriptor = this.remoteClassDescriptors?.[classId];\n        if (!descriptor) {\n            throw new Error(`No class registered with ID '${classId}'`);\n        }\n\n        clazz = <AnyConstructor>(descriptor.ctor ? this.createProxyFunction(classId + '.ctor', descriptor.ctor, 'ctor_call', 'sync')\n            : function () { throw new Error(`Constructor of class '${classId}' is not defined`); });\n\n        // create the proxy functions/properties on the prototype with no objId, so each function will look up \"proxyObjectId\" on \"this\"\n        // so the prototype will work with multiple instances\n        this.createProxyObject(null, descriptor.instance as ObjectDescriptorWithProps, clazz.prototype);\n\n        // add static functions/props\n        const staticDescr = descriptor.static as ObjectDescriptorWithProps ?? {};\n        const objDescr = this.remoteObjectDescriptors?.[classId];\n        if (!isFunctionDescriptor(objDescr)) {\n            staticDescr.props = objDescr?.props;\n        }\n        this.createProxyObject(classId, staticDescr, clazz);\n\n        this.proxyClassRegistry.set(classId, clazz);\n\n        return clazz;\n    }\n\n    private createProxyObject(objId: string|null, descriptor?: ObjectDescriptorWithProps, obj: any = {}) {\n        Object.assign(obj, descriptor?.props);\n\n        for (const prop of descriptor?.functions ?? []) {\n            obj[getPropName(prop)] = this.createProxyFunction(objId, prop, 'method_call');\n        }\n\n        const setterCallType = this.channel.sendSync ? 'sync' : 'void';\n\n        for (const prop of descriptor?.proxiedProperties ?? []) {\n            const descr = typeof prop === 'string' ? { name: prop } : prop;\n            Object.defineProperty(obj, descr.name, {\n                get: <AnyFunction>this.createProxyFunction(objId, { ...descr.get, name: descr.name }, 'prop_get', 'sync'),\n                set: descr.readonly ? undefined : <AnyFunction>this.createProxyFunction(objId, { ...descr.set, name: descr.name }, 'prop_set', setterCallType)\n            });\n        }\n\n        obj[proxyObjectId] = objId;\n\n        return obj;\n    }\n\n    private registerLocalObj(obj: any, descriptor: FunctionDescriptor | ObjectDescriptor) {\n        let objId = obj[hostObjectId];\n        if (!this.hostObjectRegistry.has(objId)) {\n            objId = this.objectIdGenerator();\n            this.hostObjectRegistry.set(objId, { target: obj, descriptor });\n            obj[hostObjectId] = objId;\n        }\n        return objId;\n    }\n\n    private processBeforeSerialization(obj: any, replyChannel: RPCChannel, descriptor?: Descriptor) {\n        if (obj?.[proxyObjectId]) {\n            return { _rpc_type: 'hostObject', objId: obj[proxyObjectId] };\n        }\n\n        switch (typeof obj) {\n            case 'object': {\n                if (!obj) break;\n\n                // special case for Promise\n                if (obj.constructor === Promise) {\n                    if (!this.hostObjectRegistry.has((obj as any)[hostObjectId])) {\n                        let result: unknown;\n                        let success: boolean;\n                        obj.then(\n                            (value) => { result = value; success = true; },\n                            (value) => { result = value; success = false; }\n                        ).finally(() => this.sendAsyncIfPossible({ action: 'fn_reply', callType: 'async', success, result, callId: objId }, replyChannel));\n                    }\n                    const objId = this.registerLocalObj(obj, {});\n                    return { _rpc_type: 'object', objId, classId: 'Promise' };\n                }\n\n                const entry = this.hostClassRegistry.get(obj.constructor?.[classIdSym]);\n                if (entry) {\n                    const objId = this.registerLocalObj(obj, entry.descriptor.instance ?? {});\n                    const props: any = {};\n\n                    for (const prop of entry.descriptor.instance?.readonlyProperties ?? []) {\n                        const propName = getPropName(prop);\n                        props[propName] = this.processBeforeSerialization(obj[propName], replyChannel);\n                    }\n\n                    return { _rpc_type: 'object', classId: entry.descriptor.classId, props, objId };\n                }\n\n                for (const key of Object.keys(obj)) {\n                    obj[key] = this.processBeforeSerialization(obj[key], replyChannel);\n                }\n                break;\n            }\n            case 'function': {\n                const objId = this.registerLocalObj(obj, descriptor as FunctionDescriptor);\n                return { _rpc_type: 'function', objId };\n            }\n        }\n        return obj;\n    }\n\n    private processAfterSerialization(obj: any, replyChannel: RPCChannel, descriptor?: Descriptor) {\n        if (typeof obj !== 'object' || !obj) return obj;\n\n        switch (obj._rpc_type) {\n            case 'object': {\n                return this.getOrCreateProxyInstance(obj.objId, obj.classId, obj.props, replyChannel);\n            }\n            case 'function': {\n                return this.getOrCreateProxyFunction(obj.objId, replyChannel, descriptor as FunctionDescriptor);\n            }\n            case 'hostObject': {\n                return this.hostObjectRegistry.get(obj.objId)?.target;\n            }\n        }\n\n        for (const key of Object.keys(obj)) {\n            obj[key] = this.processAfterSerialization(obj[key], replyChannel, getPropertyDescriptor(descriptor as ObjectDescriptor, key));\n        }\n\n        return obj;\n    }\n\n    private sendObjectDied(objId: string, replyChannel = this.channel) {\n        this.sendAsyncIfPossible({ action: 'obj_died', objId }, replyChannel);\n    }\n\n    private getOrCreateProxyInstance(objId: string, classId: string, props: any, replyChannel: RPCChannel) {\n        let obj = this.proxyObjectRegistry.get(objId);\n        if (obj) return obj;\n\n        obj = props ?? {};\n\n        // special case for Promise\n        if (classId === 'Promise') {\n            obj = new Promise((resolve, reject) => this.asyncCallbacks.set(objId, { resolve, reject }));\n        } else {\n            obj[proxyObjectId] = objId;\n            const clazz = this.getProxyClass(classId);\n            Object.setPrototypeOf(obj, clazz.prototype);\n        }\n\n        this.proxyObjectRegistry.register(objId, obj, () => this.sendObjectDied(objId, replyChannel));\n        return obj;\n    }\n\n    private getOrCreateProxyFunction(objId: string, replyChannel: RPCChannel, descriptor?: FunctionDescriptor) {\n        let fn = this.proxyObjectRegistry.get(objId);\n        if (fn) return fn;\n\n        if (descriptor) descriptor.type = 'function';\n        fn = this.createProxyFunction(objId, <any>descriptor, 'fn_call', 'async', replyChannel);\n        fn[proxyObjectId] = objId;\n        this.proxyObjectRegistry.register(objId, fn, () => this.sendObjectDied(objId, replyChannel));\n\n        return fn;\n    }\n\n}\n"]}