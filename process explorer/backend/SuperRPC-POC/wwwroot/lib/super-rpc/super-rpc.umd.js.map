{"version":3,"file":"super-rpc.umd.js","sources":["../src/proxy-object-registry.ts","../src/rpc-descriptor-types.ts","../src/super-rpc.ts"],"sourcesContent":["/**\r\n * Stores proxy objects/functions that represent remote objects - **used internally**.\r\n *\r\n * On the other side the corresponding \"host\" object/function is held in a registry by a strong reference,\r\n * and in order to be able to remove it and not leak the reference, we need a way to inform the other side\r\n * when the proxy object is \"no longer used\". For this we use the WeakRef and FinalizationRegistry features.\r\n *\r\n * We hold the proxy object/function with a weak reference, and when it is garbage collected, we can be sure that\r\n * it will not be used (called) anymore, so we remove it from our object registry and send a message\r\n * to the other side to remove the corresponding local object from the hostObjectRegistry as well.\r\n * @module\r\n * @internal\r\n */\r\n\r\nexport const rpc_disposed = Symbol('rpc_disposed');\r\nexport const rpc_disposeFunc = Symbol('rpc_dispose');\r\n\r\nexport class ProxyObjectRegistry {\r\n    private readonly registry = new Map<string, WeakRef<any>>();\r\n    private readonly objectFinalized = new FinalizationRegistry((rpc_dispose: () => void) => rpc_dispose());\r\n\r\n    /**\r\n     * Register an object.\r\n     * @param dispose Called when the object is removed from the registry (either explicitly or by the GC)\r\n     */\r\n    public register(objId: string, obj: any, dispose?: () => void) {\r\n        const unregToken = {};\r\n        obj[rpc_disposed] = false;\r\n        obj[rpc_disposeFunc] = () => {\r\n            this.remoteObjectDisposed(objId, unregToken);\r\n            obj[rpc_disposed] = true;\r\n            dispose?.();\r\n        };\r\n        this.objectFinalized.register(obj, obj[rpc_disposeFunc], unregToken);\r\n        this.registry.set(objId, new WeakRef(obj));\r\n    }\r\n\r\n    public has(objId: string) {\r\n        return this.registry.has(objId);\r\n    }\r\n\r\n    public delete(objId: string) {\r\n        this.registry.delete(objId);\r\n    }\r\n\r\n    public get(objId: string) {\r\n        return this.registry.get(objId)?.deref();\r\n    }\r\n\r\n    private remoteObjectDisposed(objId: string, uregToken: object) {\r\n        this.objectFinalized.unregister(uregToken);\r\n        this.registry.delete(objId);\r\n    }\r\n\r\n}","/**\r\n * The descriptors are used to describe what properties/functions to expose on an object\r\n * and what are the function return behaviors.\r\n * @module\r\n */\r\n\r\n/**\r\n * Function return behaviors are the following:\r\n * - sync  - the proxy function will return the result synchronously (works only if the channel supports synchronous communication)\r\n * - async - the proxy function will return a Promise (works only if the channel supports asynchronous communication)\r\n * - void  - the return value is ignored and no result message is sent\r\n *\r\n * @see [[RPCChannel]]\r\n */\r\nexport type FunctionReturnBehavior = 'sync' | 'async' | 'void';\r\n\r\n/**\r\n * Describes a function, its arguments and its return type.\r\n */\r\nexport interface FunctionDescriptor<TReturn extends FunctionReturnBehavior = FunctionReturnBehavior> {\r\n    type?: 'function';\r\n    name?: string;\r\n\r\n    argCount?: number;\r\n\r\n    /**\r\n     * Describes the arguments of the function.\r\n     *\r\n     * Currently only functions need to be described with a [[FunctionDescriptor]], otherwise no descriptor is needed.\r\n     */\r\n    arguments?: ArgumentDescriptor[];\r\n\r\n    /**\r\n     * Return behavior.\r\n     */\r\n    returns?: TReturn;\r\n}\r\n\r\n/**\r\n * Describes a property.\r\n */\r\nexport interface PropertyDescriptor {\r\n    type?: 'property';\r\n    name: string;\r\n\r\n    /**\r\n     * The getter of the property.\r\n     * If set to 'async' then it returns a Promise.\r\n     * Default return behavior is 'sync'.\r\n     */\r\n    get?: FunctionDescriptor<'sync' | 'async'>;\r\n\r\n    /**\r\n     * The setter of the property.\r\n     * Default return behavior is 'sync'.\r\n     */\r\n    set?: FunctionDescriptor<'void' | 'sync'>;\r\n\r\n    /**\r\n     * If `true` then no setter will be generated for the proxy property.\r\n     * @default false\r\n     */\r\n    readonly?: boolean;\r\n}\r\n\r\n/**\r\n * Describes an argument for a function. If `idx` is not set then this\r\n * descriptor applies to *all* arguments.\r\n *\r\n * Since we only care about functions as arguments, for now, it is basically a FunctionDescriptor.\r\n * If the argument is not a function, do not specify a descriptor for it!\r\n */\r\nexport interface ArgumentDescriptor extends FunctionDescriptor {\r\n    idx?: number;\r\n}\r\n\r\n/**\r\n * Describes an object that we want to expose.\r\n */\r\nexport interface ObjectDescriptor {\r\n    type?: 'object';\r\n\r\n    /**\r\n     * List of functions we want to expose on the proxy object.\r\n     * Default return behavior is 'async'.\r\n     */\r\n    functions?: (string|FunctionDescriptor)[];\r\n\r\n    /**\r\n     * List of properties we want to expose on the proxy object.\r\n     */\r\n    proxiedProperties?: (string|PropertyDescriptor)[];\r\n\r\n    /**\r\n     * Since readonly property values don't change, they are sent to the other side, instead of generating a getter.\r\n     */\r\n    readonlyProperties?: string[];\r\n}\r\n\r\nexport interface ObjectDescriptorWithProps extends ObjectDescriptor {\r\n    /**\r\n     * This is filled in by the library. It contains the values of the readonlyProperties on the given object.\r\n     */\r\n    props?: any;\r\n}\r\n\r\n/**\r\n * Describes a class to expose.\r\n */\r\nexport interface ClassDescriptor {\r\n    type?: 'class';\r\n\r\n    /**\r\n     * Ignore this. Filled in by [[registerHostClass]] function.\r\n     */\r\n    classId?: string;\r\n\r\n    /**\r\n     * Expose a constructor function that will construct an instance on the host side.\r\n     * Default return behavior is 'sync'.\r\n     */\r\n    ctor?: FunctionDescriptor;\r\n\r\n    /**\r\n     * Describes the \"static\" part of the class, treated as an object.\r\n     */\r\n    static?: ObjectDescriptor;\r\n\r\n    /**\r\n     * Describes instances of this class.\r\n     */\r\n    instance?: ObjectDescriptor;\r\n}\r\n\r\nexport type Descriptor = ObjectDescriptor | FunctionDescriptor | PropertyDescriptor;\r\n\r\nexport type ObjectDescriptors = { [key: string]: ObjectDescriptorWithProps };\r\nexport type FunctionDescriptors = { [key: string]: FunctionDescriptor };\r\nexport type ClassDescriptors = { [key: string]: ClassDescriptor };\r\n\r\n// util functions\r\nexport function getPropName(descriptor: string | { name?: string }) {\r\n    return typeof descriptor === 'string' ? descriptor : descriptor.name || '';\r\n}\r\n\r\nexport function getArgumentDescriptor(descriptor: FunctionDescriptor, idx?: number) {\r\n    return typeof descriptor === 'object' ? descriptor.arguments?.find(arg => arg.idx == null || arg.idx === idx) : undefined;\r\n}\r\n\r\nexport function getFunctionDescriptor(descriptor: ObjectDescriptor, funcName: string) {\r\n    return <FunctionDescriptor>descriptor?.functions?.find(func => typeof func === 'object' && func.name === funcName);\r\n}\r\n\r\nexport function getPropertyDescriptor(descriptor?: ObjectDescriptor, propName?: string) {\r\n    return <PropertyDescriptor>descriptor?.proxiedProperties?.find(prop => typeof prop === 'object' && prop.name === propName);\r\n}\r\n\r\nexport function isFunctionDescriptor(descriptor?: Descriptor): descriptor is FunctionDescriptor {\r\n    return descriptor?.type === 'function';\r\n}\r\n\r\nexport type AnyConstructor = new (...args: any[]) => any;\r\nexport type AnyFunction = ((...args: any[]) => any);\r\n\r\nexport function processFunctionDescriptor(descriptor: string|FunctionDescriptor, func: AnyFunction) {\r\n    if (typeof descriptor === 'string') descriptor = { name: descriptor, type: 'function' };\r\n    descriptor ??= { type: 'function' };\r\n    descriptor.argCount = func.length;\r\n    descriptor.name ??= func.name;\r\n    return descriptor;\r\n}\r\n\r\nexport function processObjectDescriptor(descriptor: ObjectDescriptor, obj: any) {\r\n    descriptor ??= { type: 'object' };\r\n\r\n    if (obj && descriptor.functions) {\r\n        for (const [idx, fdescr] of descriptor.functions.entries()) {\r\n            descriptor.functions[idx] = processFunctionDescriptor(fdescr, obj[getPropName(fdescr)]);\r\n        }\r\n    }\r\n\r\n    return descriptor;\r\n}","import { ProxyObjectRegistry, rpc_disposed } from './proxy-object-registry';\r\nimport { processObjectDescriptor, processFunctionDescriptor } from './rpc-descriptor-types';\r\nimport {\r\n    AnyConstructor,\r\n    AnyFunction,\r\n    ClassDescriptor, ClassDescriptors, Descriptor,\r\n    FunctionDescriptor, FunctionDescriptors, FunctionReturnBehavior,\r\n    getArgumentDescriptor, getFunctionDescriptor, getPropertyDescriptor, getPropName,\r\n    isFunctionDescriptor, ObjectDescriptor, ObjectDescriptors, ObjectDescriptorWithProps\r\n} from './rpc-descriptor-types';\r\nimport type {\r\n    RPC_AnyCallAction, RPC_AnyCallMessage,\r\n    RPC_AsyncCallAction, RPC_DescriptorsResultMessage,\r\n    RPC_Message, RPC_SyncCallAction, RPC_VoidCallAction\r\n} from './rpc-message-types';\r\n\r\n\r\ntype PromiseCallbacks = {\r\n    resolve: (data?: any) => void;\r\n    reject: (data?: any) => void;\r\n};\r\n\r\ntype ClassRegistryEntry = {\r\n    target: AnyConstructor;\r\n    descriptor: ClassDescriptor;\r\n};\r\n\r\ntype HostObjectRegistryEntry = {\r\n    target: any;\r\n    descriptor: ObjectDescriptor;\r\n};\r\n\r\ntype HostFunctionRegistryEntry = {\r\n    target: any;\r\n    descriptor: FunctionDescriptor;\r\n};\r\n\r\n\r\nconst hostObjectId = Symbol('hostObjectId');\r\nconst proxyObjectId = Symbol('proxyObjectId');\r\nconst classIdSym = Symbol('classId');\r\n\r\n/**\r\n * The channel used for the communication.\r\n * Can support synchronous and/or asynchronous messages.\r\n *\r\n * Note: if sync/async is not supported, make sure to use the correct return type for functions: [[FunctionReturnBehavior]].\r\n */\r\nexport interface RPCChannel {\r\n    /**\r\n     * Sends a message and returns the response synchronously.\r\n     */\r\n    sendSync?: (message: RPC_Message) => any;\r\n\r\n    /**\r\n     * Sends a message asnychronously. The response will come via the `receive` callback function.\r\n     */\r\n    sendAsync?: (message: RPC_Message) => void;\r\n\r\n    /**\r\n     * Register a callback for when an async message arrives.\r\n     * Note: The \"context\" is exposed during function calls via the [[SuperRPC.currentContext]] property.\r\n     */\r\n    receive?: (callback: (message: RPC_Message, replyChannel?: RPCChannel, context?: any) => void) => void;\r\n}\r\n\r\n/**\r\n * The SuperRPC is the central piece. An instance must be created on both sides.\r\n *\r\n * Objects, functions or classes can be registered on the \"host\" side\r\n * (see [[registerHostObject]], [[registerHostClass]]) and then functions/properties can be\r\n * called from the \"client\" side (see [[getProxyObject]], [[getProxyClass]]).\r\n *\r\n * The RPC service is symmetric, so depending on the use-case (and the channel),\r\n * both side can be \"host\" and \"client\" at the same time.\r\n *\r\n * The constructor needs a function to generate unique IDs for objects.\r\n * In order to have no dependencies this needs to be passed in.\r\n * For convenience the examples use [nanoid](https://www.npmjs.com/package/nanoid).\r\n */\r\nexport class SuperRPC {\r\n    private channel!: RPCChannel;\r\n\r\n    private remoteObjectDescriptors?: ObjectDescriptors;\r\n    private remoteFunctionDescriptors?: FunctionDescriptors;\r\n    private remoteClassDescriptors?: ClassDescriptors;\r\n    private remoteDescriptorsCallbacks?: PromiseCallbacks;\r\n\r\n    private asyncCallbacks = new Map<string, PromiseCallbacks>();\r\n    private callId = 0;\r\n\r\n    private readonly proxyObjectRegistry = new ProxyObjectRegistry();\r\n    private readonly proxyClassRegistry = new Map<string, AnyConstructor>();\r\n    private readonly hostObjectRegistry = new Map<string, HostObjectRegistryEntry>();\r\n    private readonly hostFunctionRegistry = new Map<string, HostFunctionRegistryEntry>();\r\n    private readonly hostClassRegistry = new Map<string, ClassRegistryEntry>();\r\n\r\n    /**\r\n     * @param objectIdGenerator A function to generate a unique ID for an object.\r\n     *\r\n     * When sending an object to the other side that can not be serialized, we\r\n     * generate an ID and send that instead. The other side creates a proxy object\r\n     * that represents the remote object.\r\n     */\r\n    constructor(private objectIdGenerator: () => string) {\r\n    }\r\n\r\n    /**\r\n     * Stores the current \"context\" object that is passed to the callback of the [[RPCChannel.receive]] function.\r\n     */\r\n    public currentContext: any;\r\n\r\n    /**\r\n     * Connect the service to a channel.\r\n     */\r\n    connect(channel: RPCChannel) {\r\n        this.channel = channel;\r\n        channel.receive?.(this.messageReceived.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Register an object in the service to be called remotely.\r\n     * @param objId An ID that the \"client\" side uses to identify this object.\r\n     * @param target The target object\r\n     * @param descriptor Describes which functions/properties to expose\r\n     */\r\n    registerHostObject(objId: string, target: object, descriptor: ObjectDescriptor) {\r\n        descriptor.type = 'object';\r\n        (target as any)[hostObjectId] = objId;\r\n        this.hostObjectRegistry.set(objId, { target, descriptor });\r\n    }\r\n\r\n    /**\r\n     * Register a function in the service to be called remotely.\r\n     * @param objId An ID that the \"client\" side uses to identify this function.\r\n     * @param target The target function\r\n     * @param descriptor Describes arguments and return behavior ([[FunctionReturnBehavior]])\r\n     */\r\n    registerHostFunction(objId: string, target: AnyFunction, descriptor: FunctionDescriptor) {\r\n        descriptor.type = 'function';\r\n        (target as any)[hostObjectId] = objId;\r\n        this.hostFunctionRegistry.set(objId, { target, descriptor });\r\n    }\r\n\r\n    /**\r\n     * Register a class in the service.\r\n     *\r\n     * When an instance of this class is passed to the other side, only the \"readonlyProperties\" are sent (see [[ClassDescriptor]]).\r\n     * Functions and proxied properties are generated there and those call back to the original object.\r\n     *\r\n     * Even the constructor can be proxied.\r\n     *\r\n     * Note: static functions/properties act as if the class was a normal host object.\r\n     *\r\n     * @param classId An ID to identify the class on the client side.\r\n     * @param classCtor The class itself (its constructor function)\r\n     * @param descriptor What properties/functions to expose\r\n     */\r\n    registerHostClass(classId: string, classCtor: AnyConstructor, descriptor: ClassDescriptor) {\r\n        descriptor.type = 'class';\r\n        descriptor.classId = classId;\r\n\r\n        if (descriptor.static) {\r\n            this.registerHostObject(classId, classCtor, descriptor.static);\r\n        }\r\n\r\n        if (descriptor.ctor) {\r\n            this.registerHostFunction(classId, <any>classCtor, descriptor.ctor);\r\n        }\r\n\r\n        (classCtor as any)[classIdSym] = classId;\r\n        this.hostClassRegistry.set(classId, { target: classCtor, descriptor });\r\n    }\r\n\r\n    /**\r\n     * Send a request to get the descriptors for the registered host objects from the other side.\r\n     * Uses synchronous communication if possible and returns `true`/`false` based on if the descriptors were received.\r\n     * If sync is not available, it uses async messaging and returns a Promise.\r\n     */\r\n    requestRemoteDescriptors() {\r\n        if (this.channel?.sendSync) {\r\n            const response = this.sendSync({ action: 'get_descriptors' }) as RPC_DescriptorsResultMessage;\r\n            return this.setRemoteDescriptors(response);\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            this.sendAsync({ action: 'get_descriptors' });\r\n            this.remoteDescriptorsCallbacks = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    private setRemoteDescriptors(response: RPC_DescriptorsResultMessage) {\r\n        if (typeof response !== 'object') return false;\r\n\r\n        if (response.classes) {\r\n            this.remoteClassDescriptors = response.classes;\r\n        }\r\n        if (response.objects) {\r\n            this.remoteObjectDescriptors = response.objects;\r\n        }\r\n        if (response.functions) {\r\n            this.remoteFunctionDescriptors = response.functions;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Send the descriptors for the registered host objects to the other side.\r\n     * If possible, the message is sent synchronously.\r\n     * This is a \"push\" style message, for \"pull\" see [[requestRemoteDescriptors]].\r\n     */\r\n    sendRemoteDescriptors(replyChannel = this.channel) {\r\n        this.sendSyncIfPossible({\r\n            action: 'descriptors',\r\n            objects: this.getLocalDescriptors(this.hostObjectRegistry, processObjectDescriptor),\r\n            functions: this.getLocalDescriptors(this.hostFunctionRegistry, processFunctionDescriptor),\r\n            classes: this.getLocalDescriptors(this.hostClassRegistry),\r\n        }, replyChannel);\r\n    }\r\n\r\n    private getLocalDescriptors<T extends HostObjectRegistryEntry|HostFunctionRegistryEntry|ClassRegistryEntry>(\r\n        registry: Map<string, T>,\r\n        processFn?: (descr: T['target'], obj: any) => T['target']\r\n    ): T extends HostObjectRegistryEntry ? ObjectDescriptors : T extends HostFunctionRegistryEntry ? FunctionDescriptors : ClassDescriptors\r\n    {\r\n        const descriptors: any = {};\r\n        for (const key of registry.keys()) {\r\n            // .get() could return undefined, but we know it will never do that, since we iterate over existing keys\r\n            // therefore it is safe to cast it to the entry types\r\n            const entry = <T>registry.get(key);\r\n\r\n            if (!entry.descriptor) continue;\r\n\r\n            let descr = <T['target']>{ ...entry.descriptor };\r\n            descr = processFn?.(descr, entry.target) ?? descr;\r\n            descriptors[key] = descr;\r\n\r\n            if (entry.descriptor.type === 'object' && entry.descriptor.readonlyProperties) {\r\n                const props: any = {};\r\n                for (const prop of entry.descriptor.readonlyProperties) {\r\n                    props[prop] = (entry as HostObjectRegistryEntry).target[prop];\r\n                }\r\n                (descr as ObjectDescriptorWithProps).props = props;\r\n            }\r\n        }\r\n        return descriptors;\r\n    }\r\n\r\n    private sendSync(message: RPC_Message, channel = this.channel) {\r\n        this.addMarker(message);\r\n        return channel?.sendSync?.(message);\r\n    }\r\n\r\n    private sendAsync(message: RPC_Message, channel = this.channel) {\r\n        this.addMarker(message);\r\n        channel?.sendAsync?.(message);\r\n    }\r\n\r\n    private sendSyncIfPossible(message: RPC_Message, channel = this.channel) {\r\n        return channel?.sendSync ? this.sendSync(message, channel) : this.sendAsync(message, channel);\r\n    }\r\n\r\n    private sendAsyncIfPossible(message: RPC_Message, channel = this.channel) {\r\n        return channel?.sendAsync ? this.sendAsync(message, channel) : this.sendSync(message, channel);\r\n    }\r\n\r\n    private addMarker(message: RPC_Message) {\r\n        message.rpc_marker = 'srpc';\r\n    }\r\n\r\n    private checkMarker(message: RPC_Message) {\r\n        return typeof message === 'object' && message.rpc_marker === 'srpc';\r\n    }\r\n\r\n    private callTargetFunction(msg: RPC_AnyCallMessage, replyChannel = this.channel) {\r\n        const entry = (msg.action === 'fn_call' || msg.action === 'ctor_call' ? this.hostFunctionRegistry : this.hostObjectRegistry).get(msg.objId);\r\n        let result: any;\r\n        let success = true;\r\n        try {\r\n            if (!entry) throw new Error(`No object found with ID '${msg.objId}'`);\r\n            let scope: unknown = null;\r\n            let { descriptor, target } = entry;\r\n\r\n            switch (msg.action) {\r\n                case 'prop_get': {\r\n                    result = target[msg.prop];\r\n                    break;\r\n                }\r\n                case 'prop_set': {\r\n                    const descr = getPropertyDescriptor(descriptor as ObjectDescriptor, msg.prop);\r\n                    target[msg.prop] = this.processAfterSerialization(msg.args[0], replyChannel, descr?.get?.arguments?.[0]);\r\n                    break;\r\n                }\r\n                case 'method_call': {\r\n                    scope = target;\r\n                    descriptor = getFunctionDescriptor(descriptor as ObjectDescriptor, msg.prop);\r\n                    target = target[msg.prop];\r\n                    if (typeof target !== 'function') throw new Error(`Property ${msg.prop} is not a function on object ${msg.objId}`);\r\n                    // NO break here!\r\n                }\r\n                // eslint-disable-next-line no-fallthrough\r\n                case 'fn_call': {\r\n                    result = target.apply(scope, this.deserializeFunctionArgs(descriptor as FunctionDescriptor, msg.args, replyChannel));\r\n                    break;\r\n                }\r\n                case 'ctor_call': {\r\n                    result = new target(...this.deserializeFunctionArgs(descriptor as FunctionDescriptor, msg.args, replyChannel));\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (msg.callType === 'async') {\r\n                Promise.resolve(result)\r\n                    .then(value => result = this.processBeforeSerialization(value, replyChannel), err => { result = err?.toString?.(); success = false; })\r\n                    .then(() => this.sendAsync({ action: 'fn_reply', callType: 'async', success, result, callId: msg.callId }, replyChannel));\r\n            } else if (msg.callType === 'sync') {\r\n                result = this.processBeforeSerialization(result, replyChannel);\r\n            }\r\n        } catch (err: any) {\r\n            success = false;\r\n            result = err?.toString?.();\r\n        }\r\n        if (msg.callType === 'sync') {\r\n            this.sendSync({ action: 'fn_reply', callType: 'sync', success, result }, replyChannel);\r\n        } else if (msg.callType === 'async' && !success) {\r\n            this.sendAsync({ action: 'fn_reply', callType: 'async', success, result, callId: msg.callId }, replyChannel);\r\n        }\r\n    }\r\n\r\n    private messageReceived(message: RPC_Message, replyChannel = this.channel, context?: any) {\r\n        this.currentContext = context;\r\n\r\n        if (this.checkMarker(message)) {\r\n            switch (message.action) {\r\n                case 'get_descriptors': {\r\n                    this.sendRemoteDescriptors(replyChannel);\r\n                    break;\r\n                }\r\n                case 'descriptors': {\r\n                    const success = this.setRemoteDescriptors(message);\r\n                    this.remoteDescriptorsCallbacks?.[success ? 'resolve' : 'reject']();\r\n                    this.remoteDescriptorsCallbacks = undefined;\r\n                    break;\r\n                }\r\n                case 'prop_get':\r\n                case 'prop_set':\r\n                case 'ctor_call':\r\n                case 'fn_call':\r\n                case 'method_call': {\r\n                    this.callTargetFunction(message, replyChannel);\r\n                    break;\r\n                }\r\n                case 'obj_died': {\r\n                    this.hostObjectRegistry.delete(message.objId);\r\n                    break;\r\n                }\r\n                case 'fn_reply': {\r\n                    if (message.callType === 'async') {\r\n                        const result = this.processAfterSerialization(message.result, replyChannel);\r\n                        const callbacks = this.asyncCallbacks.get(message.callId);\r\n                        callbacks?.[message.success ? 'resolve' : 'reject'](result);\r\n                        this.asyncCallbacks.delete(message.callId);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private serializeFunctionArgs(func: FunctionDescriptor, args: any[], replyChannel: RPCChannel) {\r\n        return args.map((arg, idx) => this.processBeforeSerialization(arg, replyChannel, getArgumentDescriptor(func, idx)));\r\n    }\r\n\r\n    private deserializeFunctionArgs(func: FunctionDescriptor, args: any[], replyChannel: RPCChannel) {\r\n        return args.map((arg, idx) => this.processAfterSerialization(arg, replyChannel, getArgumentDescriptor(func, idx)));\r\n    }\r\n\r\n    private createVoidProxyFunction(objId: string|null, func: FunctionDescriptor, action: RPC_VoidCallAction, replyChannel: RPCChannel) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const _this = this;\r\n        const fn = function (this: any, ...args: any[]) {\r\n            if ((fn as any)[rpc_disposed]) throw new Error('Remote function has been disposed');\r\n            _this.sendAsyncIfPossible({\r\n                action,\r\n                callType: 'void',\r\n                objId: objId ?? this[proxyObjectId],\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                prop: func.name!,\r\n                args: _this.serializeFunctionArgs(func, args, replyChannel)\r\n            }, replyChannel);\r\n        };\r\n        return fn;\r\n    }\r\n\r\n    private createSyncProxyFunction(objId: string|null, func: FunctionDescriptor, action: RPC_SyncCallAction, replyChannel: RPCChannel) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const _this = this;\r\n        const fn = function (this: any, ...args: any[]) {\r\n            if ((fn as any)[rpc_disposed]) throw new Error('Remote function has been disposed');\r\n            const response = _this.sendSync({\r\n                action,\r\n                callType: 'sync',\r\n                objId: objId ?? this[proxyObjectId],\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                prop: func.name!,\r\n                args: _this.serializeFunctionArgs(func, args, replyChannel)\r\n            }, replyChannel);\r\n\r\n            if (!response) throw new Error('No response received');\r\n            if (!_this.checkMarker(response)) throw new Error(`Invalid response ${JSON.stringify(response)}`);\r\n\r\n            if (!response.success) throw new Error(response.result);\r\n            return _this.processAfterSerialization(response.result, replyChannel);\r\n        };\r\n        return fn;\r\n    }\r\n\r\n    private createAsyncProxyFunction(objId: string|null, func: FunctionDescriptor, action: RPC_AsyncCallAction, replyChannel: RPCChannel) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const _this = this;\r\n        const fn = function (this: any, ...args: any[]) {\r\n            return new Promise((resolve, reject) => {\r\n                if ((fn as any)[rpc_disposed]) throw new Error('Remote function has been disposed');\r\n                _this.callId++;\r\n                _this.sendAsync({\r\n                    action,\r\n                    callType: 'async',\r\n                    objId: objId ?? this[proxyObjectId],\r\n                    callId: _this.callId.toString(),\r\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                    prop: func.name!,\r\n                    args: _this.serializeFunctionArgs(func, args, replyChannel)\r\n                }, replyChannel);\r\n                _this.asyncCallbacks.set(_this.callId.toString(), { resolve, reject });\r\n            });\r\n        };\r\n        return fn;\r\n    }\r\n\r\n    private createProxyFunction(\r\n        objId: string | null,\r\n        prop: string | FunctionDescriptor,\r\n        action: RPC_AnyCallAction,\r\n        defaultCallType: FunctionReturnBehavior = 'async',\r\n        replyChannel = this.channel): AnyFunction | AnyConstructor\r\n    {\r\n        const descriptor = (typeof prop === 'object') ? prop : { name: prop };\r\n        let callType = descriptor?.returns || defaultCallType;\r\n\r\n        if (callType === 'async' && !replyChannel.sendAsync) callType = 'sync';\r\n        if (callType === 'sync' && !replyChannel.sendSync) callType = 'async';\r\n\r\n        switch (callType) {\r\n            case 'void': return this.createVoidProxyFunction(objId, descriptor, <RPC_VoidCallAction>action, replyChannel);\r\n            case 'sync': return this.createSyncProxyFunction(objId, descriptor, <RPC_SyncCallAction>action, replyChannel);\r\n            default: return this.createAsyncProxyFunction(objId, descriptor, <RPC_AsyncCallAction>action, replyChannel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or creates a proxy object that represents a host object from the other side.\r\n     *\r\n     * This side must have the descriptor for the object.\r\n     * See [[sendRemoteDescriptors]], [[requestRemoteDescriptors]].\r\n     */\r\n    getProxyObject(objId: string) {\r\n        let obj: any = this.proxyObjectRegistry.get(objId);\r\n        if (obj) return obj;\r\n\r\n        const descriptor = this.remoteObjectDescriptors?.[objId];\r\n        if (!descriptor) {\r\n            throw new Error(`No object registered with ID '${objId}'`);\r\n        }\r\n\r\n        obj = this.createProxyObject(objId, descriptor);\r\n\r\n        this.proxyObjectRegistry.register(objId, obj);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * Gets or creates a proxy function that represents a host object from the other side.\r\n     *\r\n     * This side must have the descriptor for the function.\r\n     * See [[sendRemoteDescriptors]], [[requestRemoteDescriptors]].\r\n     */\r\n    getProxyFunction(objId: string) {\r\n        let obj: any = this.proxyObjectRegistry.get(objId);\r\n        if (obj) return obj;\r\n\r\n        const descriptor = this.remoteFunctionDescriptors?.[objId];\r\n        if (!descriptor) {\r\n            throw new Error(`No function registered with ID '${objId}'`);\r\n        }\r\n\r\n        obj = this.createProxyFunction(objId, descriptor, 'fn_call');\r\n\r\n        this.proxyObjectRegistry.register(objId, obj);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * Gets or creates a proxy \"class\" that will serve multiple purposes.\r\n     * - Static functions/properties on the class are proxied the same way as on a regular \"host\" object\r\n     * - If specified the constructor actually constructs an instance of the registered host class on the other side\r\n     * and the returned instance will represent the remote instance, with the specified functions/properties working\r\n     * on its prototype as expected.\r\n     * - If an instance of the registered host class is being sent from the other side,\r\n     * an instance of this proxy class will be created and passed on this side.\r\n     */\r\n    getProxyClass(classId: string): AnyConstructor {\r\n        let clazz = this.proxyClassRegistry.get(classId);\r\n        if (clazz) return clazz;\r\n\r\n        const descriptor = this.remoteClassDescriptors?.[classId];\r\n        if (!descriptor) {\r\n            throw new Error(`No class registered with ID '${classId}'`);\r\n        }\r\n\r\n        clazz = <AnyConstructor>(descriptor.ctor ? this.createProxyFunction(classId, descriptor.ctor, 'ctor_call', 'sync')\r\n            : function () { throw new Error(`Constructor of class '${classId}' is not defined`); });\r\n\r\n        // create the proxy functions/properties on the prototype with no objId, so each function will look up \"proxyObjectId\" on \"this\"\r\n        // so the prototype will work with multiple instances\r\n        this.createProxyObject(null, descriptor.instance as ObjectDescriptorWithProps, clazz.prototype);\r\n\r\n        // add static functions/props\r\n        const staticDescr = descriptor.static as ObjectDescriptorWithProps ?? {};\r\n        const objDescr = this.remoteObjectDescriptors?.[classId];\r\n        if (!isFunctionDescriptor(objDescr)) {\r\n            staticDescr.props = objDescr?.props;\r\n        }\r\n        this.createProxyObject(classId, staticDescr, clazz);\r\n\r\n        this.proxyClassRegistry.set(classId, clazz);\r\n\r\n        return clazz;\r\n    }\r\n\r\n    private createProxyObject(objId: string|null, descriptor?: ObjectDescriptorWithProps, obj: any = {}) {\r\n        Object.assign(obj, descriptor?.props);\r\n\r\n        for (const prop of descriptor?.functions ?? []) {\r\n            obj[getPropName(prop)] = this.createProxyFunction(objId, prop, 'method_call');\r\n        }\r\n\r\n        const setterCallType = this.channel.sendSync ? 'sync' : 'void';\r\n\r\n        for (const prop of descriptor?.proxiedProperties ?? []) {\r\n            const descr = typeof prop === 'string' ? { name: prop } : prop;\r\n            Object.defineProperty(obj, descr.name, {\r\n                get: <AnyFunction>this.createProxyFunction(objId, { ...descr.get, name: descr.name }, 'prop_get', 'sync'),\r\n                set: descr.readonly ? undefined : <AnyFunction>this.createProxyFunction(objId, { ...descr.set, name: descr.name }, 'prop_set', setterCallType)\r\n            });\r\n        }\r\n\r\n        obj[proxyObjectId] = objId;\r\n\r\n        return obj;\r\n    }\r\n\r\n    private registerLocalObj(obj: any, descriptor: ObjectDescriptor): string {\r\n        let objId = obj[hostObjectId];\r\n        if (!this.hostObjectRegistry.has(objId)) {\r\n            objId = this.objectIdGenerator();\r\n            this.hostObjectRegistry.set(objId, { target: obj, descriptor });\r\n            obj[hostObjectId] = objId;\r\n        }\r\n        return objId;\r\n    }\r\n    private registerLocalFunc(obj: any, descriptor: FunctionDescriptor): string {\r\n        let objId = obj[hostObjectId];\r\n        if (!this.hostFunctionRegistry.has(objId)) {\r\n            objId = this.objectIdGenerator();\r\n            this.hostFunctionRegistry.set(objId, { target: obj, descriptor });\r\n            obj[hostObjectId] = objId;\r\n        }\r\n        return objId;\r\n    }\r\n\r\n    private processBeforeSerialization(obj: any, replyChannel: RPCChannel, descriptor?: Descriptor) {\r\n        if (obj?.[proxyObjectId]) {\r\n            return { _rpc_type: 'hostObject', objId: obj[proxyObjectId] };\r\n        }\r\n\r\n        switch (typeof obj) {\r\n            case 'object': {\r\n                if (!obj) break;\r\n\r\n                // special case for Promise\r\n                if (obj.constructor === Promise) {\r\n                    if (!this.hostObjectRegistry.has((obj as any)[hostObjectId])) {\r\n                        let result: unknown;\r\n                        let success: boolean;\r\n                        obj.then(\r\n                            (value) => { result = value; success = true; },\r\n                            (value) => { result = value; success = false; }\r\n                        ).finally(() => this.sendAsyncIfPossible({ action: 'fn_reply', callType: 'async', success, result, callId: objId }, replyChannel));\r\n                    }\r\n                    const objId = this.registerLocalObj(obj, {});\r\n                    return { _rpc_type: 'object', objId, classId: 'Promise' };\r\n                }\r\n\r\n                const entry = this.hostClassRegistry.get(obj.constructor?.[classIdSym]);\r\n                if (entry) {\r\n                    const objId = this.registerLocalObj(obj, entry.descriptor.instance ?? {});\r\n                    const props: any = {};\r\n\r\n                    for (const prop of entry.descriptor.instance?.readonlyProperties ?? []) {\r\n                        const propName = getPropName(prop);\r\n                        props[propName] = this.processBeforeSerialization(obj[propName], replyChannel);\r\n                    }\r\n\r\n                    return { _rpc_type: 'object', classId: entry.descriptor.classId, props, objId };\r\n                }\r\n\r\n                for (const key of Object.keys(obj)) {\r\n                    obj[key] = this.processBeforeSerialization(obj[key], replyChannel);\r\n                }\r\n                break;\r\n            }\r\n            case 'function': {\r\n                const objId = this.registerLocalFunc(obj, descriptor as FunctionDescriptor);\r\n                return { _rpc_type: 'function', objId };\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    private processAfterSerialization(obj: any, replyChannel: RPCChannel, descriptor?: Descriptor) {\r\n        if (typeof obj !== 'object' || !obj) return obj;\r\n\r\n        switch (obj._rpc_type) {\r\n            case 'object': {\r\n                return this.getOrCreateProxyInstance(obj.objId, obj.classId, obj.props, replyChannel);\r\n            }\r\n            case 'function': {\r\n                return this.getOrCreateProxyFunction(obj.objId, replyChannel, descriptor as FunctionDescriptor);\r\n            }\r\n            case 'hostObject': {\r\n                return this.hostObjectRegistry.get(obj.objId)?.target;\r\n            }\r\n        }\r\n\r\n        for (const key of Object.keys(obj)) {\r\n            obj[key] = this.processAfterSerialization(obj[key], replyChannel, getPropertyDescriptor(descriptor as ObjectDescriptor, key));\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    private sendObjectDied(objId: string, replyChannel = this.channel) {\r\n        this.sendAsyncIfPossible({ action: 'obj_died', objId }, replyChannel);\r\n    }\r\n\r\n    private getOrCreateProxyInstance(objId: string, classId: string, props: any, replyChannel: RPCChannel) {\r\n        let obj = this.proxyObjectRegistry.get(objId);\r\n        if (obj) return obj;\r\n\r\n        obj = props ?? {};\r\n\r\n        // special case for Promise\r\n        if (classId === 'Promise') {\r\n            obj = new Promise((resolve, reject) => this.asyncCallbacks.set(objId, { resolve, reject }));\r\n        } else {\r\n            obj[proxyObjectId] = objId;\r\n            const clazz = this.getProxyClass(classId);\r\n            Object.setPrototypeOf(obj, clazz.prototype);\r\n        }\r\n\r\n        this.proxyObjectRegistry.register(objId, obj, () => this.sendObjectDied(objId, replyChannel));\r\n        return obj;\r\n    }\r\n\r\n    private getOrCreateProxyFunction(objId: string, replyChannel: RPCChannel, descriptor?: FunctionDescriptor) {\r\n        let fn = this.proxyObjectRegistry.get(objId);\r\n        if (fn) return fn;\r\n\r\n        if (descriptor) descriptor.type = 'function';\r\n        fn = this.createProxyFunction(objId, <any>descriptor, 'fn_call', 'async', replyChannel);\r\n        fn[proxyObjectId] = objId;\r\n        this.proxyObjectRegistry.register(objId, fn, () => this.sendObjectDied(objId, replyChannel));\r\n\r\n        return fn;\r\n    }\r\n\r\n}\r\n"],"names":[],"mappings":";;;;;;IAAA;;;;;;;;;;;;;IAcO,MAAM,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;IAC5C,MAAM,eAAe,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;UAExC,mBAAmB;QACX,QAAQ,GAAG,IAAI,GAAG,EAAwB,CAAC;QAC3C,eAAe,GAAG,IAAI,oBAAoB,CAAC,CAAC,WAAuB,KAAK,WAAW,EAAE,CAAC,CAAC;;;;;QAMjG,QAAQ,CAAC,KAAa,EAAE,GAAQ,EAAE,OAAoB;YACzD,MAAM,UAAU,GAAG,EAAE,CAAC;YACtB,GAAG,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;YAC1B,GAAG,CAAC,eAAe,CAAC,GAAG;gBACnB,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gBAC7C,GAAG,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;gBACzB,OAAO,IAAI,CAAC;aACf,CAAC;YACF,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,eAAe,CAAC,EAAE,UAAU,CAAC,CAAC;YACrE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;SAC9C;QAEM,GAAG,CAAC,KAAa;YACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SACnC;QAEM,MAAM,CAAC,KAAa;YACvB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC/B;QAEM,GAAG,CAAC,KAAa;YACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC;SAC5C;QAEO,oBAAoB,CAAC,KAAa,EAAE,SAAiB;YACzD,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YAC3C,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC/B;;;ICpDL;;;;;IA4IA;aACgB,WAAW,CAAC,UAAsC;QAC9D,OAAO,OAAO,UAAU,KAAK,QAAQ,GAAG,UAAU,GAAG,UAAU,CAAC,IAAI,IAAI,EAAE,CAAC;IAC/E,CAAC;aAEe,qBAAqB,CAAC,UAA8B,EAAE,GAAY;QAC9E,OAAO,OAAO,UAAU,KAAK,QAAQ,GAAG,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,SAAS,CAAC;IAC9H,CAAC;aAEe,qBAAqB,CAAC,UAA4B,EAAE,QAAgB;QAChF,OAA2B,UAAU,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC;IACvH,CAAC;aAEe,qBAAqB,CAAC,UAA6B,EAAE,QAAiB;QAClF,OAA2B,UAAU,EAAE,iBAAiB,EAAE,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC;IAC/H,CAAC;aAEe,oBAAoB,CAAC,UAAuB;QACxD,OAAO,UAAU,EAAE,IAAI,KAAK,UAAU,CAAC;IAC3C,CAAC;aAKe,yBAAyB,CAAC,UAAqC,EAAE,IAAiB;QAC9F,IAAI,OAAO,UAAU,KAAK,QAAQ;YAAE,UAAU,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;QACxF,UAAU,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;QACpC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC;QAClC,UAAU,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;QAC9B,OAAO,UAAU,CAAC;IACtB,CAAC;aAEe,uBAAuB,CAAC,UAA4B,EAAE,GAAQ;QAC1E,UAAU,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;QAElC,IAAI,GAAG,IAAI,UAAU,CAAC,SAAS,EAAE;YAC7B,KAAK,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE;gBACxD,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,yBAAyB,CAAC,MAAM,EAAE,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aAC3F;SACJ;QAED,OAAO,UAAU,CAAC;IACtB;;IChJA,MAAM,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;IAC5C,MAAM,aAAa,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;IAC9C,MAAM,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;IA0BrC;;;;;;;;;;;;;;UAca,QAAQ;QAwBG;QAvBZ,OAAO,CAAc;QAErB,uBAAuB,CAAqB;QAC5C,yBAAyB,CAAuB;QAChD,sBAAsB,CAAoB;QAC1C,0BAA0B,CAAoB;QAE9C,cAAc,GAAG,IAAI,GAAG,EAA4B,CAAC;QACrD,MAAM,GAAG,CAAC,CAAC;QAEF,mBAAmB,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAChD,kBAAkB,GAAG,IAAI,GAAG,EAA0B,CAAC;QACvD,kBAAkB,GAAG,IAAI,GAAG,EAAmC,CAAC;QAChE,oBAAoB,GAAG,IAAI,GAAG,EAAqC,CAAC;QACpE,iBAAiB,GAAG,IAAI,GAAG,EAA8B,CAAC;;;;;;;;QAS3E,YAAoB,iBAA+B;YAA/B,sBAAiB,GAAjB,iBAAiB,CAAc;SAClD;;;;QAKM,cAAc,CAAM;;;;QAK3B,OAAO,CAAC,OAAmB;YACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SACtD;;;;;;;QAQD,kBAAkB,CAAC,KAAa,EAAE,MAAc,EAAE,UAA4B;YAC1E,UAAU,CAAC,IAAI,GAAG,QAAQ,CAAC;YAC1B,MAAc,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;YACtC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;SAC9D;;;;;;;QAQD,oBAAoB,CAAC,KAAa,EAAE,MAAmB,EAAE,UAA8B;YACnF,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC;YAC5B,MAAc,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;YACtC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;SAChE;;;;;;;;;;;;;;;QAgBD,iBAAiB,CAAC,OAAe,EAAE,SAAyB,EAAE,UAA2B;YACrF,UAAU,CAAC,IAAI,GAAG,OAAO,CAAC;YAC1B,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC;YAE7B,IAAI,UAAU,CAAC,MAAM,EAAE;gBACnB,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;aAClE;YAED,IAAI,UAAU,CAAC,IAAI,EAAE;gBACjB,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAO,SAAS,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;aACvE;YAEA,SAAiB,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC;YACzC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC;SAC1E;;;;;;QAOD,wBAAwB;YACpB,IAAI,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE;gBACxB,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAiC,CAAC;gBAC9F,OAAO,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;aAC9C;YAED,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM;gBACrC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAC,CAAC;gBAC9C,IAAI,CAAC,0BAA0B,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;aACzD,CAAC,CAAC;SACN;QAEO,oBAAoB,CAAC,QAAsC;YAC/D,IAAI,OAAO,QAAQ,KAAK,QAAQ;gBAAE,OAAO,KAAK,CAAC;YAE/C,IAAI,QAAQ,CAAC,OAAO,EAAE;gBAClB,IAAI,CAAC,sBAAsB,GAAG,QAAQ,CAAC,OAAO,CAAC;aAClD;YACD,IAAI,QAAQ,CAAC,OAAO,EAAE;gBAClB,IAAI,CAAC,uBAAuB,GAAG,QAAQ,CAAC,OAAO,CAAC;aACnD;YACD,IAAI,QAAQ,CAAC,SAAS,EAAE;gBACpB,IAAI,CAAC,yBAAyB,GAAG,QAAQ,CAAC,SAAS,CAAC;aACvD;YACD,OAAO,IAAI,CAAC;SACf;;;;;;QAOD,qBAAqB,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO;YAC7C,IAAI,CAAC,kBAAkB,CAAC;gBACpB,MAAM,EAAE,aAAa;gBACrB,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,kBAAkB,EAAE,uBAAuB,CAAC;gBACnF,SAAS,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,oBAAoB,EAAE,yBAAyB,CAAC;gBACzF,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,CAAC;aAC5D,EAAE,YAAY,CAAC,CAAC;SACpB;QAEO,mBAAmB,CACvB,QAAwB,EACxB,SAAyD;YAGzD,MAAM,WAAW,GAAQ,EAAE,CAAC;YAC5B,KAAK,MAAM,GAAG,IAAI,QAAQ,CAAC,IAAI,EAAE,EAAE;;;gBAG/B,MAAM,KAAK,GAAM,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAEnC,IAAI,CAAC,KAAK,CAAC,UAAU;oBAAE,SAAS;gBAEhC,IAAI,KAAK,GAAgB,EAAE,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;gBACjD,KAAK,GAAG,SAAS,GAAG,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC;gBAClD,WAAW,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBAEzB,IAAI,KAAK,CAAC,UAAU,CAAC,IAAI,KAAK,QAAQ,IAAI,KAAK,CAAC,UAAU,CAAC,kBAAkB,EAAE;oBAC3E,MAAM,KAAK,GAAQ,EAAE,CAAC;oBACtB,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,UAAU,CAAC,kBAAkB,EAAE;wBACpD,KAAK,CAAC,IAAI,CAAC,GAAI,KAAiC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;qBACjE;oBACA,KAAmC,CAAC,KAAK,GAAG,KAAK,CAAC;iBACtD;aACJ;YACD,OAAO,WAAW,CAAC;SACtB;QAEO,QAAQ,CAAC,OAAoB,EAAE,OAAO,GAAG,IAAI,CAAC,OAAO;YACzD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACxB,OAAO,OAAO,EAAE,QAAQ,GAAG,OAAO,CAAC,CAAC;SACvC;QAEO,SAAS,CAAC,OAAoB,EAAE,OAAO,GAAG,IAAI,CAAC,OAAO;YAC1D,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACxB,OAAO,EAAE,SAAS,GAAG,OAAO,CAAC,CAAC;SACjC;QAEO,kBAAkB,CAAC,OAAoB,EAAE,OAAO,GAAG,IAAI,CAAC,OAAO;YACnE,OAAO,OAAO,EAAE,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SACjG;QAEO,mBAAmB,CAAC,OAAoB,EAAE,OAAO,GAAG,IAAI,CAAC,OAAO;YACpE,OAAO,OAAO,EAAE,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SAClG;QAEO,SAAS,CAAC,OAAoB;YAClC,OAAO,CAAC,UAAU,GAAG,MAAM,CAAC;SAC/B;QAEO,WAAW,CAAC,OAAoB;YACpC,OAAO,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,CAAC,UAAU,KAAK,MAAM,CAAC;SACvE;QAEO,kBAAkB,CAAC,GAAuB,EAAE,YAAY,GAAG,IAAI,CAAC,OAAO;YAC3E,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,MAAM,KAAK,SAAS,IAAI,GAAG,CAAC,MAAM,KAAK,WAAW,GAAG,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,kBAAkB,EAAE,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC5I,IAAI,MAAW,CAAC;YAChB,IAAI,OAAO,GAAG,IAAI,CAAC;YACnB,IAAI;gBACA,IAAI,CAAC,KAAK;oBAAE,MAAM,IAAI,KAAK,CAAC,4BAA4B,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC;gBACtE,IAAI,KAAK,GAAY,IAAI,CAAC;gBAC1B,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;gBAEnC,QAAQ,GAAG,CAAC,MAAM;oBACd,KAAK,UAAU,EAAE;wBACb,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBAC1B,MAAM;qBACT;oBACD,KAAK,UAAU,EAAE;wBACb,MAAM,KAAK,GAAG,qBAAqB,CAAC,UAA8B,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;wBAC9E,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;wBACzG,MAAM;qBACT;oBACD,KAAK,aAAa,EAAE;wBAChB,KAAK,GAAG,MAAM,CAAC;wBACf,UAAU,GAAG,qBAAqB,CAAC,UAA8B,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;wBAC7E,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBAC1B,IAAI,OAAO,MAAM,KAAK,UAAU;4BAAE,MAAM,IAAI,KAAK,CAAC,YAAY,GAAG,CAAC,IAAI,gCAAgC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;;qBAEtH;;oBAED,KAAK,SAAS,EAAE;wBACZ,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,uBAAuB,CAAC,UAAgC,EAAE,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;wBACrH,MAAM;qBACT;oBACD,KAAK,WAAW,EAAE;wBACd,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAgC,EAAE,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;wBAC/G,MAAM;qBACT;iBACJ;gBAED,IAAI,GAAG,CAAC,QAAQ,KAAK,OAAO,EAAE;oBAC1B,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC;yBAClB,IAAI,CAAC,KAAK,IAAI,MAAM,GAAG,IAAI,CAAC,0BAA0B,CAAC,KAAK,EAAE,YAAY,CAAC,EAAE,GAAG,MAAM,MAAM,GAAG,GAAG,EAAE,QAAQ,IAAI,CAAC,CAAC,OAAO,GAAG,KAAK,CAAC,EAAE,CAAC;yBACrI,IAAI,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC;iBACjI;qBAAM,IAAI,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE;oBAChC,MAAM,GAAG,IAAI,CAAC,0BAA0B,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;iBAClE;aACJ;YAAC,OAAO,GAAQ,EAAE;gBACf,OAAO,GAAG,KAAK,CAAC;gBAChB,MAAM,GAAG,GAAG,EAAE,QAAQ,IAAI,CAAC;aAC9B;YACD,IAAI,GAAG,CAAC,QAAQ,KAAK,MAAM,EAAE;gBACzB,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,YAAY,CAAC,CAAC;aAC1F;iBAAM,IAAI,GAAG,CAAC,QAAQ,KAAK,OAAO,IAAI,CAAC,OAAO,EAAE;gBAC7C,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,YAAY,CAAC,CAAC;aAChH;SACJ;QAEO,eAAe,CAAC,OAAoB,EAAE,YAAY,GAAG,IAAI,CAAC,OAAO,EAAE,OAAa;YACpF,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;YAE9B,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE;gBAC3B,QAAQ,OAAO,CAAC,MAAM;oBAClB,KAAK,iBAAiB,EAAE;wBACpB,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;wBACzC,MAAM;qBACT;oBACD,KAAK,aAAa,EAAE;wBAChB,MAAM,OAAO,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;wBACnD,IAAI,CAAC,0BAA0B,GAAG,OAAO,GAAG,SAAS,GAAG,QAAQ,CAAC,EAAE,CAAC;wBACpE,IAAI,CAAC,0BAA0B,GAAG,SAAS,CAAC;wBAC5C,MAAM;qBACT;oBACD,KAAK,UAAU,CAAC;oBAChB,KAAK,UAAU,CAAC;oBAChB,KAAK,WAAW,CAAC;oBACjB,KAAK,SAAS,CAAC;oBACf,KAAK,aAAa,EAAE;wBAChB,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;wBAC/C,MAAM;qBACT;oBACD,KAAK,UAAU,EAAE;wBACb,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;wBAC9C,MAAM;qBACT;oBACD,KAAK,UAAU,EAAE;wBACb,IAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,EAAE;4BAC9B,MAAM,MAAM,GAAG,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;4BAC5E,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;4BAC1D,SAAS,GAAG,OAAO,CAAC,OAAO,GAAG,SAAS,GAAG,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;4BAC5D,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;yBAC9C;wBACD,MAAM;qBACT;iBACJ;aACJ;SACJ;QAGO,qBAAqB,CAAC,IAAwB,EAAE,IAAW,EAAE,YAAwB;YACzF,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,IAAI,CAAC,0BAA0B,CAAC,GAAG,EAAE,YAAY,EAAE,qBAAqB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;SACvH;QAEO,uBAAuB,CAAC,IAAwB,EAAE,IAAW,EAAE,YAAwB;YAC3F,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,IAAI,CAAC,yBAAyB,CAAC,GAAG,EAAE,YAAY,EAAE,qBAAqB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;SACtH;QAEO,uBAAuB,CAAC,KAAkB,EAAE,IAAwB,EAAE,MAA0B,EAAE,YAAwB;;YAE9H,MAAM,KAAK,GAAG,IAAI,CAAC;YACnB,MAAM,EAAE,GAAG,UAAqB,GAAG,IAAW;gBAC1C,IAAK,EAAU,CAAC,YAAY,CAAC;oBAAE,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;gBACpF,KAAK,CAAC,mBAAmB,CAAC;oBACtB,MAAM;oBACN,QAAQ,EAAE,MAAM;oBAChB,KAAK,EAAE,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC;;oBAEnC,IAAI,EAAE,IAAI,CAAC,IAAK;oBAChB,IAAI,EAAE,KAAK,CAAC,qBAAqB,CAAC,IAAI,EAAE,IAAI,EAAE,YAAY,CAAC;iBAC9D,EAAE,YAAY,CAAC,CAAC;aACpB,CAAC;YACF,OAAO,EAAE,CAAC;SACb;QAEO,uBAAuB,CAAC,KAAkB,EAAE,IAAwB,EAAE,MAA0B,EAAE,YAAwB;;YAE9H,MAAM,KAAK,GAAG,IAAI,CAAC;YACnB,MAAM,EAAE,GAAG,UAAqB,GAAG,IAAW;gBAC1C,IAAK,EAAU,CAAC,YAAY,CAAC;oBAAE,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;gBACpF,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;oBAC5B,MAAM;oBACN,QAAQ,EAAE,MAAM;oBAChB,KAAK,EAAE,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC;;oBAEnC,IAAI,EAAE,IAAI,CAAC,IAAK;oBAChB,IAAI,EAAE,KAAK,CAAC,qBAAqB,CAAC,IAAI,EAAE,IAAI,EAAE,YAAY,CAAC;iBAC9D,EAAE,YAAY,CAAC,CAAC;gBAEjB,IAAI,CAAC,QAAQ;oBAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBACvD,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC;oBAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBAElG,IAAI,CAAC,QAAQ,CAAC,OAAO;oBAAE,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACxD,OAAO,KAAK,CAAC,yBAAyB,CAAC,QAAQ,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;aACzE,CAAC;YACF,OAAO,EAAE,CAAC;SACb;QAEO,wBAAwB,CAAC,KAAkB,EAAE,IAAwB,EAAE,MAA2B,EAAE,YAAwB;;YAEhI,MAAM,KAAK,GAAG,IAAI,CAAC;YACnB,MAAM,EAAE,GAAG,UAAqB,GAAG,IAAW;gBAC1C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;oBAC/B,IAAK,EAAU,CAAC,YAAY,CAAC;wBAAE,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;oBACpF,KAAK,CAAC,MAAM,EAAE,CAAC;oBACf,KAAK,CAAC,SAAS,CAAC;wBACZ,MAAM;wBACN,QAAQ,EAAE,OAAO;wBACjB,KAAK,EAAE,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC;wBACnC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE;;wBAE/B,IAAI,EAAE,IAAI,CAAC,IAAK;wBAChB,IAAI,EAAE,KAAK,CAAC,qBAAqB,CAAC,IAAI,EAAE,IAAI,EAAE,YAAY,CAAC;qBAC9D,EAAE,YAAY,CAAC,CAAC;oBACjB,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;iBAC1E,CAAC,CAAC;aACN,CAAC;YACF,OAAO,EAAE,CAAC;SACb;QAEO,mBAAmB,CACvB,KAAoB,EACpB,IAAiC,EACjC,MAAyB,EACzB,kBAA0C,OAAO,EACjD,YAAY,GAAG,IAAI,CAAC,OAAO;YAE3B,MAAM,UAAU,GAAG,CAAC,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;YACtE,IAAI,QAAQ,GAAG,UAAU,EAAE,OAAO,IAAI,eAAe,CAAC;YAEtD,IAAI,QAAQ,KAAK,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS;gBAAE,QAAQ,GAAG,MAAM,CAAC;YACvE,IAAI,QAAQ,KAAK,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ;gBAAE,QAAQ,GAAG,OAAO,CAAC;YAEtE,QAAQ,QAAQ;gBACZ,KAAK,MAAM,EAAE,OAAO,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,UAAU,EAAsB,MAAM,EAAE,YAAY,CAAC,CAAC;gBAC9G,KAAK,MAAM,EAAE,OAAO,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,UAAU,EAAsB,MAAM,EAAE,YAAY,CAAC,CAAC;gBAC9G,SAAS,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,UAAU,EAAuB,MAAM,EAAE,YAAY,CAAC,CAAC;aAC/G;SACJ;;;;;;;QAQD,cAAc,CAAC,KAAa;YACxB,IAAI,GAAG,GAAQ,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnD,IAAI,GAAG;gBAAE,OAAO,GAAG,CAAC;YAEpB,MAAM,UAAU,GAAG,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC,CAAC;YACzD,IAAI,CAAC,UAAU,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,iCAAiC,KAAK,GAAG,CAAC,CAAC;aAC9D;YAED,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;YAEhD,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YAC9C,OAAO,GAAG,CAAC;SACd;;;;;;;QAQD,gBAAgB,CAAC,KAAa;YAC1B,IAAI,GAAG,GAAQ,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnD,IAAI,GAAG;gBAAE,OAAO,GAAG,CAAC;YAEpB,MAAM,UAAU,GAAG,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC,CAAC;YAC3D,IAAI,CAAC,UAAU,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,mCAAmC,KAAK,GAAG,CAAC,CAAC;aAChE;YAED,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;YAE7D,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YAC9C,OAAO,GAAG,CAAC;SACd;;;;;;;;;;QAWD,aAAa,CAAC,OAAe;YACzB,IAAI,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACjD,IAAI,KAAK;gBAAE,OAAO,KAAK,CAAC;YAExB,MAAM,UAAU,GAAG,IAAI,CAAC,sBAAsB,GAAG,OAAO,CAAC,CAAC;YAC1D,IAAI,CAAC,UAAU,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,gCAAgC,OAAO,GAAG,CAAC,CAAC;aAC/D;YAED,KAAK,IAAoB,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,EAAE,WAAW,EAAE,MAAM,CAAC;kBAC5G,cAAc,MAAM,IAAI,KAAK,CAAC,yBAAyB,OAAO,kBAAkB,CAAC,CAAC,EAAE,CAAC,CAAC;;;YAI5F,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,UAAU,CAAC,QAAqC,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;;YAGhG,MAAM,WAAW,GAAG,UAAU,CAAC,MAAmC,IAAI,EAAE,CAAC;YACzE,MAAM,QAAQ,GAAG,IAAI,CAAC,uBAAuB,GAAG,OAAO,CAAC,CAAC;YACzD,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE;gBACjC,WAAW,CAAC,KAAK,GAAG,QAAQ,EAAE,KAAK,CAAC;aACvC;YACD,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;YAEpD,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAE5C,OAAO,KAAK,CAAC;SAChB;QAEO,iBAAiB,CAAC,KAAkB,EAAE,UAAsC,EAAE,MAAW,EAAE;YAC/F,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;YAEtC,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE,SAAS,IAAI,EAAE,EAAE;gBAC5C,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;aACjF;YAED,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC;YAE/D,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE,iBAAiB,IAAI,EAAE,EAAE;gBACpD,MAAM,KAAK,GAAG,OAAO,IAAI,KAAK,QAAQ,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;gBAC/D,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE;oBACnC,GAAG,EAAe,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,EAAE,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,MAAM,CAAC;oBACzG,GAAG,EAAE,KAAK,CAAC,QAAQ,GAAG,SAAS,GAAgB,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,EAAE,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,cAAc,CAAC;iBACjJ,CAAC,CAAC;aACN;YAED,GAAG,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC;YAE3B,OAAO,GAAG,CAAC;SACd;QAEO,gBAAgB,CAAC,GAAQ,EAAE,UAA4B;YAC3D,IAAI,KAAK,GAAG,GAAG,CAAC,YAAY,CAAC,CAAC;YAC9B,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACrC,KAAK,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACjC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;gBAChE,GAAG,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;aAC7B;YACD,OAAO,KAAK,CAAC;SAChB;QACO,iBAAiB,CAAC,GAAQ,EAAE,UAA8B;YAC9D,IAAI,KAAK,GAAG,GAAG,CAAC,YAAY,CAAC,CAAC;YAC9B,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACvC,KAAK,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACjC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC;gBAClE,GAAG,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;aAC7B;YACD,OAAO,KAAK,CAAC;SAChB;QAEO,0BAA0B,CAAC,GAAQ,EAAE,YAAwB,EAAE,UAAuB;YAC1F,IAAI,GAAG,GAAG,aAAa,CAAC,EAAE;gBACtB,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC;aACjE;YAED,QAAQ,OAAO,GAAG;gBACd,KAAK,QAAQ,EAAE;oBACX,IAAI,CAAC,GAAG;wBAAE,MAAM;;oBAGhB,IAAI,GAAG,CAAC,WAAW,KAAK,OAAO,EAAE;wBAC7B,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAE,GAAW,CAAC,YAAY,CAAC,CAAC,EAAE;4BAC1D,IAAI,MAAe,CAAC;4BACpB,IAAI,OAAgB,CAAC;4BACrB,GAAG,CAAC,IAAI,CACJ,CAAC,KAAK,OAAO,MAAM,GAAG,KAAK,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAC9C,CAAC,KAAK,OAAO,MAAM,GAAG,KAAK,CAAC,CAAC,OAAO,GAAG,KAAK,CAAC,EAAE,CAClD,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,mBAAmB,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC;yBACtI;wBACD,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;wBAC7C,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;qBAC7D;oBAED,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC;oBACxE,IAAI,KAAK,EAAE;wBACP,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,KAAK,CAAC,UAAU,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;wBAC1E,MAAM,KAAK,GAAQ,EAAE,CAAC;wBAEtB,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,kBAAkB,IAAI,EAAE,EAAE;4BACpE,MAAM,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;4BACnC,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,YAAY,CAAC,CAAC;yBAClF;wBAED,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;qBACnF;oBAED,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;wBAChC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,CAAC;qBACtE;oBACD,MAAM;iBACT;gBACD,KAAK,UAAU,EAAE;oBACb,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,UAAgC,CAAC,CAAC;oBAC5E,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC;iBAC3C;aACJ;YACD,OAAO,GAAG,CAAC;SACd;QAEO,yBAAyB,CAAC,GAAQ,EAAE,YAAwB,EAAE,UAAuB;YACzF,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,CAAC,GAAG;gBAAE,OAAO,GAAG,CAAC;YAEhD,QAAQ,GAAG,CAAC,SAAS;gBACjB,KAAK,QAAQ,EAAE;oBACX,OAAO,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;iBACzF;gBACD,KAAK,UAAU,EAAE;oBACb,OAAO,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,KAAK,EAAE,YAAY,EAAE,UAAgC,CAAC,CAAC;iBACnG;gBACD,KAAK,YAAY,EAAE;oBACf,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC;iBACzD;aACJ;YAED,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;gBAChC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,YAAY,EAAE,qBAAqB,CAAC,UAA8B,EAAE,GAAG,CAAC,CAAC,CAAC;aACjI;YAED,OAAO,GAAG,CAAC;SACd;QAEO,cAAc,CAAC,KAAa,EAAE,YAAY,GAAG,IAAI,CAAC,OAAO;YAC7D,IAAI,CAAC,mBAAmB,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,EAAE,YAAY,CAAC,CAAC;SACzE;QAEO,wBAAwB,CAAC,KAAa,EAAE,OAAe,EAAE,KAAU,EAAE,YAAwB;YACjG,IAAI,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC9C,IAAI,GAAG;gBAAE,OAAO,GAAG,CAAC;YAEpB,GAAG,GAAG,KAAK,IAAI,EAAE,CAAC;;YAGlB,IAAI,OAAO,KAAK,SAAS,EAAE;gBACvB,GAAG,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;aAC/F;iBAAM;gBACH,GAAG,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC;gBAC3B,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBAC1C,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;aAC/C;YAED,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC;YAC9F,OAAO,GAAG,CAAC;SACd;QAEO,wBAAwB,CAAC,KAAa,EAAE,YAAwB,EAAE,UAA+B;YACrG,IAAI,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC7C,IAAI,EAAE;gBAAE,OAAO,EAAE,CAAC;YAElB,IAAI,UAAU;gBAAE,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC;YAC7C,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAO,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;YACxF,EAAE,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC;YAC1B,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAE,MAAM,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC;YAE7F,OAAO,EAAE,CAAC;SACb;;;;;;;;;;;;;;;;;;"}