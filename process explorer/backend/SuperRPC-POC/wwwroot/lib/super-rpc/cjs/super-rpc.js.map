{"version":3,"file":"super-rpc.js","sourceRoot":"","sources":["../../src/super-rpc.ts"],"names":[],"mappings":"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","sourcesContent":["import { ProxyObjectRegistry, rpc_disposed } from './proxy-object-registry';\r\nimport { processObjectDescriptor, processFunctionDescriptor } from './rpc-descriptor-types';\r\nimport {\r\n    AnyConstructor,\r\n    AnyFunction,\r\n    ClassDescriptor, ClassDescriptors, Descriptor,\r\n    FunctionDescriptor, FunctionDescriptors, FunctionReturnBehavior,\r\n    getArgumentDescriptor, getFunctionDescriptor, getPropertyDescriptor, getPropName,\r\n    isFunctionDescriptor, ObjectDescriptor, ObjectDescriptors, ObjectDescriptorWithProps\r\n} from './rpc-descriptor-types';\r\nimport type {\r\n    RPC_AnyCallAction, RPC_AnyCallMessage,\r\n    RPC_AsyncCallAction, RPC_DescriptorsResultMessage,\r\n    RPC_Message, RPC_SyncCallAction, RPC_VoidCallAction\r\n} from './rpc-message-types';\r\n\r\n\r\ntype PromiseCallbacks = {\r\n    resolve: (data?: any) => void;\r\n    reject: (data?: any) => void;\r\n};\r\n\r\ntype ClassRegistryEntry = {\r\n    target: AnyConstructor;\r\n    descriptor: ClassDescriptor;\r\n};\r\n\r\ntype HostObjectRegistryEntry = {\r\n    target: any;\r\n    descriptor: ObjectDescriptor;\r\n};\r\n\r\ntype HostFunctionRegistryEntry = {\r\n    target: any;\r\n    descriptor: FunctionDescriptor;\r\n};\r\n\r\n\r\nconst hostObjectId = Symbol('hostObjectId');\r\nconst proxyObjectId = Symbol('proxyObjectId');\r\nconst classIdSym = Symbol('classId');\r\n\r\n/**\r\n * The channel used for the communication.\r\n * Can support synchronous and/or asynchronous messages.\r\n *\r\n * Note: if sync/async is not supported, make sure to use the correct return type for functions: [[FunctionReturnBehavior]].\r\n */\r\nexport interface RPCChannel {\r\n    /**\r\n     * Sends a message and returns the response synchronously.\r\n     */\r\n    sendSync?: (message: RPC_Message) => any;\r\n\r\n    /**\r\n     * Sends a message asnychronously. The response will come via the `receive` callback function.\r\n     */\r\n    sendAsync?: (message: RPC_Message) => void;\r\n\r\n    /**\r\n     * Register a callback for when an async message arrives.\r\n     * Note: The \"context\" is exposed during function calls via the [[SuperRPC.currentContext]] property.\r\n     */\r\n    receive?: (callback: (message: RPC_Message, replyChannel?: RPCChannel, context?: any) => void) => void;\r\n}\r\n\r\n/**\r\n * The SuperRPC is the central piece. An instance must be created on both sides.\r\n *\r\n * Objects, functions or classes can be registered on the \"host\" side\r\n * (see [[registerHostObject]], [[registerHostClass]]) and then functions/properties can be\r\n * called from the \"client\" side (see [[getProxyObject]], [[getProxyClass]]).\r\n *\r\n * The RPC service is symmetric, so depending on the use-case (and the channel),\r\n * both side can be \"host\" and \"client\" at the same time.\r\n *\r\n * The constructor needs a function to generate unique IDs for objects.\r\n * In order to have no dependencies this needs to be passed in.\r\n * For convenience the examples use [nanoid](https://www.npmjs.com/package/nanoid).\r\n */\r\nexport class SuperRPC {\r\n    private channel!: RPCChannel;\r\n\r\n    private remoteObjectDescriptors?: ObjectDescriptors;\r\n    private remoteFunctionDescriptors?: FunctionDescriptors;\r\n    private remoteClassDescriptors?: ClassDescriptors;\r\n    private remoteDescriptorsCallbacks?: PromiseCallbacks;\r\n\r\n    private asyncCallbacks = new Map<string, PromiseCallbacks>();\r\n    private callId = 0;\r\n\r\n    private readonly proxyObjectRegistry = new ProxyObjectRegistry();\r\n    private readonly proxyClassRegistry = new Map<string, AnyConstructor>();\r\n    private readonly hostObjectRegistry = new Map<string, HostObjectRegistryEntry>();\r\n    private readonly hostFunctionRegistry = new Map<string, HostFunctionRegistryEntry>();\r\n    private readonly hostClassRegistry = new Map<string, ClassRegistryEntry>();\r\n\r\n    /**\r\n     * @param objectIdGenerator A function to generate a unique ID for an object.\r\n     *\r\n     * When sending an object to the other side that can not be serialized, we\r\n     * generate an ID and send that instead. The other side creates a proxy object\r\n     * that represents the remote object.\r\n     */\r\n    constructor(private objectIdGenerator: () => string) {\r\n    }\r\n\r\n    /**\r\n     * Stores the current \"context\" object that is passed to the callback of the [[RPCChannel.receive]] function.\r\n     */\r\n    public currentContext: any;\r\n\r\n    /**\r\n     * Connect the service to a channel.\r\n     */\r\n    connect(channel: RPCChannel) {\r\n        this.channel = channel;\r\n        channel.receive?.(this.messageReceived.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Register an object in the service to be called remotely.\r\n     * @param objId An ID that the \"client\" side uses to identify this object.\r\n     * @param target The target object\r\n     * @param descriptor Describes which functions/properties to expose\r\n     */\r\n    registerHostObject(objId: string, target: object, descriptor: ObjectDescriptor) {\r\n        descriptor.type = 'object';\r\n        (target as any)[hostObjectId] = objId;\r\n        this.hostObjectRegistry.set(objId, { target, descriptor });\r\n    }\r\n\r\n    /**\r\n     * Register a function in the service to be called remotely.\r\n     * @param objId An ID that the \"client\" side uses to identify this function.\r\n     * @param target The target function\r\n     * @param descriptor Describes arguments and return behavior ([[FunctionReturnBehavior]])\r\n     */\r\n    registerHostFunction(objId: string, target: AnyFunction, descriptor: FunctionDescriptor) {\r\n        descriptor.type = 'function';\r\n        (target as any)[hostObjectId] = objId;\r\n        this.hostFunctionRegistry.set(objId, { target, descriptor });\r\n    }\r\n\r\n    /**\r\n     * Register a class in the service.\r\n     *\r\n     * When an instance of this class is passed to the other side, only the \"readonlyProperties\" are sent (see [[ClassDescriptor]]).\r\n     * Functions and proxied properties are generated there and those call back to the original object.\r\n     *\r\n     * Even the constructor can be proxied.\r\n     *\r\n     * Note: static functions/properties act as if the class was a normal host object.\r\n     *\r\n     * @param classId An ID to identify the class on the client side.\r\n     * @param classCtor The class itself (its constructor function)\r\n     * @param descriptor What properties/functions to expose\r\n     */\r\n    registerHostClass(classId: string, classCtor: AnyConstructor, descriptor: ClassDescriptor) {\r\n        descriptor.type = 'class';\r\n        descriptor.classId = classId;\r\n\r\n        if (descriptor.static) {\r\n            this.registerHostObject(classId, classCtor, descriptor.static);\r\n        }\r\n\r\n        if (descriptor.ctor) {\r\n            this.registerHostFunction(classId, <any>classCtor, descriptor.ctor);\r\n        }\r\n\r\n        (classCtor as any)[classIdSym] = classId;\r\n        this.hostClassRegistry.set(classId, { target: classCtor, descriptor });\r\n    }\r\n\r\n    /**\r\n     * Send a request to get the descriptors for the registered host objects from the other side.\r\n     * Uses synchronous communication if possible and returns `true`/`false` based on if the descriptors were received.\r\n     * If sync is not available, it uses async messaging and returns a Promise.\r\n     */\r\n    requestRemoteDescriptors() {\r\n        if (this.channel?.sendSync) {\r\n            const response = this.sendSync({ action: 'get_descriptors' }) as RPC_DescriptorsResultMessage;\r\n            return this.setRemoteDescriptors(response);\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            this.sendAsync({ action: 'get_descriptors' });\r\n            this.remoteDescriptorsCallbacks = { resolve, reject };\r\n        });\r\n    }\r\n\r\n    private setRemoteDescriptors(response: RPC_DescriptorsResultMessage) {\r\n        if (typeof response !== 'object') return false;\r\n\r\n        if (response.classes) {\r\n            this.remoteClassDescriptors = response.classes;\r\n        }\r\n        if (response.objects) {\r\n            this.remoteObjectDescriptors = response.objects;\r\n        }\r\n        if (response.functions) {\r\n            this.remoteFunctionDescriptors = response.functions;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Send the descriptors for the registered host objects to the other side.\r\n     * If possible, the message is sent synchronously.\r\n     * This is a \"push\" style message, for \"pull\" see [[requestRemoteDescriptors]].\r\n     */\r\n    sendRemoteDescriptors(replyChannel = this.channel) {\r\n        this.sendSyncIfPossible({\r\n            action: 'descriptors',\r\n            objects: this.getLocalDescriptors(this.hostObjectRegistry, processObjectDescriptor),\r\n            functions: this.getLocalDescriptors(this.hostFunctionRegistry, processFunctionDescriptor),\r\n            classes: this.getLocalDescriptors(this.hostClassRegistry),\r\n        }, replyChannel);\r\n    }\r\n\r\n    private getLocalDescriptors<T extends HostObjectRegistryEntry|HostFunctionRegistryEntry|ClassRegistryEntry>(\r\n        registry: Map<string, T>,\r\n        processFn?: (descr: T['target'], obj: any) => T['target']\r\n    ): T extends HostObjectRegistryEntry ? ObjectDescriptors : T extends HostFunctionRegistryEntry ? FunctionDescriptors : ClassDescriptors\r\n    {\r\n        const descriptors: any = {};\r\n        for (const key of registry.keys()) {\r\n            // .get() could return undefined, but we know it will never do that, since we iterate over existing keys\r\n            // therefore it is safe to cast it to the entry types\r\n            const entry = <T>registry.get(key);\r\n\r\n            if (!entry.descriptor) continue;\r\n\r\n            let descr = <T['target']>{ ...entry.descriptor };\r\n            descr = processFn?.(descr, entry.target) ?? descr;\r\n            descriptors[key] = descr;\r\n\r\n            if (entry.descriptor.type === 'object' && entry.descriptor.readonlyProperties) {\r\n                const props: any = {};\r\n                for (const prop of entry.descriptor.readonlyProperties) {\r\n                    props[prop] = (entry as HostObjectRegistryEntry).target[prop];\r\n                }\r\n                (descr as ObjectDescriptorWithProps).props = props;\r\n            }\r\n        }\r\n        return descriptors;\r\n    }\r\n\r\n    private sendSync(message: RPC_Message, channel = this.channel) {\r\n        this.addMarker(message);\r\n        return channel?.sendSync?.(message);\r\n    }\r\n\r\n    private sendAsync(message: RPC_Message, channel = this.channel) {\r\n        this.addMarker(message);\r\n        channel?.sendAsync?.(message);\r\n    }\r\n\r\n    private sendSyncIfPossible(message: RPC_Message, channel = this.channel) {\r\n        return channel?.sendSync ? this.sendSync(message, channel) : this.sendAsync(message, channel);\r\n    }\r\n\r\n    private sendAsyncIfPossible(message: RPC_Message, channel = this.channel) {\r\n        return channel?.sendAsync ? this.sendAsync(message, channel) : this.sendSync(message, channel);\r\n    }\r\n\r\n    private addMarker(message: RPC_Message) {\r\n        message.rpc_marker = 'srpc';\r\n    }\r\n\r\n    private checkMarker(message: RPC_Message) {\r\n        return typeof message === 'object' && message.rpc_marker === 'srpc';\r\n    }\r\n\r\n    private callTargetFunction(msg: RPC_AnyCallMessage, replyChannel = this.channel) {\r\n        const entry = (msg.action === 'fn_call' || msg.action === 'ctor_call' ? this.hostFunctionRegistry : this.hostObjectRegistry).get(msg.objId);\r\n        let result: any;\r\n        let success = true;\r\n        try {\r\n            if (!entry) throw new Error(`No object found with ID '${msg.objId}'`);\r\n            let scope: unknown = null;\r\n            let { descriptor, target } = entry;\r\n\r\n            switch (msg.action) {\r\n                case 'prop_get': {\r\n                    result = target[msg.prop];\r\n                    break;\r\n                }\r\n                case 'prop_set': {\r\n                    const descr = getPropertyDescriptor(descriptor as ObjectDescriptor, msg.prop);\r\n                    target[msg.prop] = this.processAfterSerialization(msg.args[0], replyChannel, descr?.get?.arguments?.[0]);\r\n                    break;\r\n                }\r\n                case 'method_call': {\r\n                    scope = target;\r\n                    descriptor = getFunctionDescriptor(descriptor as ObjectDescriptor, msg.prop);\r\n                    target = target[msg.prop];\r\n                    if (typeof target !== 'function') throw new Error(`Property ${msg.prop} is not a function on object ${msg.objId}`);\r\n                    // NO break here!\r\n                }\r\n                // eslint-disable-next-line no-fallthrough\r\n                case 'fn_call': {\r\n                    result = target.apply(scope, this.deserializeFunctionArgs(descriptor as FunctionDescriptor, msg.args, replyChannel));\r\n                    break;\r\n                }\r\n                case 'ctor_call': {\r\n                    result = new target(...this.deserializeFunctionArgs(descriptor as FunctionDescriptor, msg.args, replyChannel));\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (msg.callType === 'async') {\r\n                Promise.resolve(result)\r\n                    .then(value => result = this.processBeforeSerialization(value, replyChannel), err => { result = err?.toString?.(); success = false; })\r\n                    .then(() => this.sendAsync({ action: 'fn_reply', callType: 'async', success, result, callId: msg.callId }, replyChannel));\r\n            } else if (msg.callType === 'sync') {\r\n                result = this.processBeforeSerialization(result, replyChannel);\r\n            }\r\n        } catch (err: any) {\r\n            success = false;\r\n            result = err?.toString?.();\r\n        }\r\n        if (msg.callType === 'sync') {\r\n            this.sendSync({ action: 'fn_reply', callType: 'sync', success, result }, replyChannel);\r\n        } else if (msg.callType === 'async' && !success) {\r\n            this.sendAsync({ action: 'fn_reply', callType: 'async', success, result, callId: msg.callId }, replyChannel);\r\n        }\r\n    }\r\n\r\n    private messageReceived(message: RPC_Message, replyChannel = this.channel, context?: any) {\r\n        this.currentContext = context;\r\n\r\n        if (this.checkMarker(message)) {\r\n            switch (message.action) {\r\n                case 'get_descriptors': {\r\n                    this.sendRemoteDescriptors(replyChannel);\r\n                    break;\r\n                }\r\n                case 'descriptors': {\r\n                    const success = this.setRemoteDescriptors(message);\r\n                    this.remoteDescriptorsCallbacks?.[success ? 'resolve' : 'reject']();\r\n                    this.remoteDescriptorsCallbacks = undefined;\r\n                    break;\r\n                }\r\n                case 'prop_get':\r\n                case 'prop_set':\r\n                case 'ctor_call':\r\n                case 'fn_call':\r\n                case 'method_call': {\r\n                    this.callTargetFunction(message, replyChannel);\r\n                    break;\r\n                }\r\n                case 'obj_died': {\r\n                    this.hostObjectRegistry.delete(message.objId);\r\n                    break;\r\n                }\r\n                case 'fn_reply': {\r\n                    if (message.callType === 'async') {\r\n                        const result = this.processAfterSerialization(message.result, replyChannel);\r\n                        const callbacks = this.asyncCallbacks.get(message.callId);\r\n                        callbacks?.[message.success ? 'resolve' : 'reject'](result);\r\n                        this.asyncCallbacks.delete(message.callId);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private serializeFunctionArgs(func: FunctionDescriptor, args: any[], replyChannel: RPCChannel) {\r\n        return args.map((arg, idx) => this.processBeforeSerialization(arg, replyChannel, getArgumentDescriptor(func, idx)));\r\n    }\r\n\r\n    private deserializeFunctionArgs(func: FunctionDescriptor, args: any[], replyChannel: RPCChannel) {\r\n        return args.map((arg, idx) => this.processAfterSerialization(arg, replyChannel, getArgumentDescriptor(func, idx)));\r\n    }\r\n\r\n    private createVoidProxyFunction(objId: string|null, func: FunctionDescriptor, action: RPC_VoidCallAction, replyChannel: RPCChannel) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const _this = this;\r\n        const fn = function (this: any, ...args: any[]) {\r\n            if ((fn as any)[rpc_disposed]) throw new Error('Remote function has been disposed');\r\n            _this.sendAsyncIfPossible({\r\n                action,\r\n                callType: 'void',\r\n                objId: objId ?? this[proxyObjectId],\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                prop: func.name!,\r\n                args: _this.serializeFunctionArgs(func, args, replyChannel)\r\n            }, replyChannel);\r\n        };\r\n        return fn;\r\n    }\r\n\r\n    private createSyncProxyFunction(objId: string|null, func: FunctionDescriptor, action: RPC_SyncCallAction, replyChannel: RPCChannel) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const _this = this;\r\n        const fn = function (this: any, ...args: any[]) {\r\n            if ((fn as any)[rpc_disposed]) throw new Error('Remote function has been disposed');\r\n            const response = _this.sendSync({\r\n                action,\r\n                callType: 'sync',\r\n                objId: objId ?? this[proxyObjectId],\r\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                prop: func.name!,\r\n                args: _this.serializeFunctionArgs(func, args, replyChannel)\r\n            }, replyChannel);\r\n\r\n            if (!response) throw new Error('No response received');\r\n            if (!_this.checkMarker(response)) throw new Error(`Invalid response ${JSON.stringify(response)}`);\r\n\r\n            if (!response.success) throw new Error(response.result);\r\n            return _this.processAfterSerialization(response.result, replyChannel);\r\n        };\r\n        return fn;\r\n    }\r\n\r\n    private createAsyncProxyFunction(objId: string|null, func: FunctionDescriptor, action: RPC_AsyncCallAction, replyChannel: RPCChannel) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const _this = this;\r\n        const fn = function (this: any, ...args: any[]) {\r\n            return new Promise((resolve, reject) => {\r\n                if ((fn as any)[rpc_disposed]) throw new Error('Remote function has been disposed');\r\n                _this.callId++;\r\n                _this.sendAsync({\r\n                    action,\r\n                    callType: 'async',\r\n                    objId: objId ?? this[proxyObjectId],\r\n                    callId: _this.callId.toString(),\r\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                    prop: func.name!,\r\n                    args: _this.serializeFunctionArgs(func, args, replyChannel)\r\n                }, replyChannel);\r\n                _this.asyncCallbacks.set(_this.callId.toString(), { resolve, reject });\r\n            });\r\n        };\r\n        return fn;\r\n    }\r\n\r\n    private createProxyFunction(\r\n        objId: string | null,\r\n        prop: string | FunctionDescriptor,\r\n        action: RPC_AnyCallAction,\r\n        defaultCallType: FunctionReturnBehavior = 'async',\r\n        replyChannel = this.channel): AnyFunction | AnyConstructor\r\n    {\r\n        const descriptor = (typeof prop === 'object') ? prop : { name: prop };\r\n        let callType = descriptor?.returns || defaultCallType;\r\n\r\n        if (callType === 'async' && !replyChannel.sendAsync) callType = 'sync';\r\n        if (callType === 'sync' && !replyChannel.sendSync) callType = 'async';\r\n\r\n        switch (callType) {\r\n            case 'void': return this.createVoidProxyFunction(objId, descriptor, <RPC_VoidCallAction>action, replyChannel);\r\n            case 'sync': return this.createSyncProxyFunction(objId, descriptor, <RPC_SyncCallAction>action, replyChannel);\r\n            default: return this.createAsyncProxyFunction(objId, descriptor, <RPC_AsyncCallAction>action, replyChannel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or creates a proxy object that represents a host object from the other side.\r\n     *\r\n     * This side must have the descriptor for the object.\r\n     * See [[sendRemoteDescriptors]], [[requestRemoteDescriptors]].\r\n     */\r\n    getProxyObject(objId: string) {\r\n        let obj: any = this.proxyObjectRegistry.get(objId);\r\n        if (obj) return obj;\r\n\r\n        const descriptor = this.remoteObjectDescriptors?.[objId];\r\n        if (!descriptor) {\r\n            throw new Error(`No object registered with ID '${objId}'`);\r\n        }\r\n\r\n        obj = this.createProxyObject(objId, descriptor);\r\n\r\n        this.proxyObjectRegistry.register(objId, obj);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * Gets or creates a proxy function that represents a host object from the other side.\r\n     *\r\n     * This side must have the descriptor for the function.\r\n     * See [[sendRemoteDescriptors]], [[requestRemoteDescriptors]].\r\n     */\r\n    getProxyFunction(objId: string) {\r\n        let obj: any = this.proxyObjectRegistry.get(objId);\r\n        if (obj) return obj;\r\n\r\n        const descriptor = this.remoteFunctionDescriptors?.[objId];\r\n        if (!descriptor) {\r\n            throw new Error(`No function registered with ID '${objId}'`);\r\n        }\r\n\r\n        obj = this.createProxyFunction(objId, descriptor, 'fn_call');\r\n\r\n        this.proxyObjectRegistry.register(objId, obj);\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * Gets or creates a proxy \"class\" that will serve multiple purposes.\r\n     * - Static functions/properties on the class are proxied the same way as on a regular \"host\" object\r\n     * - If specified the constructor actually constructs an instance of the registered host class on the other side\r\n     * and the returned instance will represent the remote instance, with the specified functions/properties working\r\n     * on its prototype as expected.\r\n     * - If an instance of the registered host class is being sent from the other side,\r\n     * an instance of this proxy class will be created and passed on this side.\r\n     */\r\n    getProxyClass(classId: string): AnyConstructor {\r\n        let clazz = this.proxyClassRegistry.get(classId);\r\n        if (clazz) return clazz;\r\n\r\n        const descriptor = this.remoteClassDescriptors?.[classId];\r\n        if (!descriptor) {\r\n            throw new Error(`No class registered with ID '${classId}'`);\r\n        }\r\n\r\n        clazz = <AnyConstructor>(descriptor.ctor ? this.createProxyFunction(classId, descriptor.ctor, 'ctor_call', 'sync')\r\n            : function () { throw new Error(`Constructor of class '${classId}' is not defined`); });\r\n\r\n        // create the proxy functions/properties on the prototype with no objId, so each function will look up \"proxyObjectId\" on \"this\"\r\n        // so the prototype will work with multiple instances\r\n        this.createProxyObject(null, descriptor.instance as ObjectDescriptorWithProps, clazz.prototype);\r\n\r\n        // add static functions/props\r\n        const staticDescr = descriptor.static as ObjectDescriptorWithProps ?? {};\r\n        const objDescr = this.remoteObjectDescriptors?.[classId];\r\n        if (!isFunctionDescriptor(objDescr)) {\r\n            staticDescr.props = objDescr?.props;\r\n        }\r\n        this.createProxyObject(classId, staticDescr, clazz);\r\n\r\n        this.proxyClassRegistry.set(classId, clazz);\r\n\r\n        return clazz;\r\n    }\r\n\r\n    private createProxyObject(objId: string|null, descriptor?: ObjectDescriptorWithProps, obj: any = {}) {\r\n        Object.assign(obj, descriptor?.props);\r\n\r\n        for (const prop of descriptor?.functions ?? []) {\r\n            obj[getPropName(prop)] = this.createProxyFunction(objId, prop, 'method_call');\r\n        }\r\n\r\n        const setterCallType = this.channel.sendSync ? 'sync' : 'void';\r\n\r\n        for (const prop of descriptor?.proxiedProperties ?? []) {\r\n            const descr = typeof prop === 'string' ? { name: prop } : prop;\r\n            Object.defineProperty(obj, descr.name, {\r\n                get: <AnyFunction>this.createProxyFunction(objId, { ...descr.get, name: descr.name }, 'prop_get', 'sync'),\r\n                set: descr.readonly ? undefined : <AnyFunction>this.createProxyFunction(objId, { ...descr.set, name: descr.name }, 'prop_set', setterCallType)\r\n            });\r\n        }\r\n\r\n        obj[proxyObjectId] = objId;\r\n\r\n        return obj;\r\n    }\r\n\r\n    private registerLocalObj(obj: any, descriptor: ObjectDescriptor): string {\r\n        let objId = obj[hostObjectId];\r\n        if (!this.hostObjectRegistry.has(objId)) {\r\n            objId = this.objectIdGenerator();\r\n            this.hostObjectRegistry.set(objId, { target: obj, descriptor });\r\n            obj[hostObjectId] = objId;\r\n        }\r\n        return objId;\r\n    }\r\n    private registerLocalFunc(obj: any, descriptor: FunctionDescriptor): string {\r\n        let objId = obj[hostObjectId];\r\n        if (!this.hostFunctionRegistry.has(objId)) {\r\n            objId = this.objectIdGenerator();\r\n            this.hostFunctionRegistry.set(objId, { target: obj, descriptor });\r\n            obj[hostObjectId] = objId;\r\n        }\r\n        return objId;\r\n    }\r\n\r\n    private processBeforeSerialization(obj: any, replyChannel: RPCChannel, descriptor?: Descriptor) {\r\n        if (obj?.[proxyObjectId]) {\r\n            return { _rpc_type: 'hostObject', objId: obj[proxyObjectId] };\r\n        }\r\n\r\n        switch (typeof obj) {\r\n            case 'object': {\r\n                if (!obj) break;\r\n\r\n                // special case for Promise\r\n                if (obj.constructor === Promise) {\r\n                    if (!this.hostObjectRegistry.has((obj as any)[hostObjectId])) {\r\n                        let result: unknown;\r\n                        let success: boolean;\r\n                        obj.then(\r\n                            (value) => { result = value; success = true; },\r\n                            (value) => { result = value; success = false; }\r\n                        ).finally(() => this.sendAsyncIfPossible({ action: 'fn_reply', callType: 'async', success, result, callId: objId }, replyChannel));\r\n                    }\r\n                    const objId = this.registerLocalObj(obj, {});\r\n                    return { _rpc_type: 'object', objId, classId: 'Promise' };\r\n                }\r\n\r\n                const entry = this.hostClassRegistry.get(obj.constructor?.[classIdSym]);\r\n                if (entry) {\r\n                    const objId = this.registerLocalObj(obj, entry.descriptor.instance ?? {});\r\n                    const props: any = {};\r\n\r\n                    for (const prop of entry.descriptor.instance?.readonlyProperties ?? []) {\r\n                        const propName = getPropName(prop);\r\n                        props[propName] = this.processBeforeSerialization(obj[propName], replyChannel);\r\n                    }\r\n\r\n                    return { _rpc_type: 'object', classId: entry.descriptor.classId, props, objId };\r\n                }\r\n\r\n                for (const key of Object.keys(obj)) {\r\n                    obj[key] = this.processBeforeSerialization(obj[key], replyChannel);\r\n                }\r\n                break;\r\n            }\r\n            case 'function': {\r\n                const objId = this.registerLocalFunc(obj, descriptor as FunctionDescriptor);\r\n                return { _rpc_type: 'function', objId };\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    private processAfterSerialization(obj: any, replyChannel: RPCChannel, descriptor?: Descriptor) {\r\n        if (typeof obj !== 'object' || !obj) return obj;\r\n\r\n        switch (obj._rpc_type) {\r\n            case 'object': {\r\n                return this.getOrCreateProxyInstance(obj.objId, obj.classId, obj.props, replyChannel);\r\n            }\r\n            case 'function': {\r\n                return this.getOrCreateProxyFunction(obj.objId, replyChannel, descriptor as FunctionDescriptor);\r\n            }\r\n            case 'hostObject': {\r\n                return this.hostObjectRegistry.get(obj.objId)?.target;\r\n            }\r\n        }\r\n\r\n        for (const key of Object.keys(obj)) {\r\n            obj[key] = this.processAfterSerialization(obj[key], replyChannel, getPropertyDescriptor(descriptor as ObjectDescriptor, key));\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    private sendObjectDied(objId: string, replyChannel = this.channel) {\r\n        this.sendAsyncIfPossible({ action: 'obj_died', objId }, replyChannel);\r\n    }\r\n\r\n    private getOrCreateProxyInstance(objId: string, classId: string, props: any, replyChannel: RPCChannel) {\r\n        let obj = this.proxyObjectRegistry.get(objId);\r\n        if (obj) return obj;\r\n\r\n        obj = props ?? {};\r\n\r\n        // special case for Promise\r\n        if (classId === 'Promise') {\r\n            obj = new Promise((resolve, reject) => this.asyncCallbacks.set(objId, { resolve, reject }));\r\n        } else {\r\n            obj[proxyObjectId] = objId;\r\n            const clazz = this.getProxyClass(classId);\r\n            Object.setPrototypeOf(obj, clazz.prototype);\r\n        }\r\n\r\n        this.proxyObjectRegistry.register(objId, obj, () => this.sendObjectDied(objId, replyChannel));\r\n        return obj;\r\n    }\r\n\r\n    private getOrCreateProxyFunction(objId: string, replyChannel: RPCChannel, descriptor?: FunctionDescriptor) {\r\n        let fn = this.proxyObjectRegistry.get(objId);\r\n        if (fn) return fn;\r\n\r\n        if (descriptor) descriptor.type = 'function';\r\n        fn = this.createProxyFunction(objId, <any>descriptor, 'fn_call', 'async', replyChannel);\r\n        fn[proxyObjectId] = objId;\r\n        this.proxyObjectRegistry.register(objId, fn, () => this.sendObjectDied(objId, replyChannel));\r\n\r\n        return fn;\r\n    }\r\n\r\n}\r\n"]}